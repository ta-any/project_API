
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model tasks
 * 
 */
export type tasks = $Result.DefaultSelection<Prisma.$tasksPayload>
/**
 * Model calls
 * 
 */
export type calls = $Result.DefaultSelection<Prisma.$callsPayload>
/**
 * Model statuses
 * 
 */
export type statuses = $Result.DefaultSelection<Prisma.$statusesPayload>
/**
 * Model doctors
 * 
 */
export type doctors = $Result.DefaultSelection<Prisma.$doctorsPayload>
/**
 * Model patients
 * 
 */
export type patients = $Result.DefaultSelection<Prisma.$patientsPayload>
/**
 * Model schedule
 * 
 */
export type schedule = $Result.DefaultSelection<Prisma.$schedulePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tasks
 * const tasks = await prisma.tasks.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tasks
   * const tasks = await prisma.tasks.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tasks`: Exposes CRUD operations for the **tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.tasksDelegate<ExtArgs>;

  /**
   * `prisma.calls`: Exposes CRUD operations for the **calls** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Calls
    * const calls = await prisma.calls.findMany()
    * ```
    */
  get calls(): Prisma.callsDelegate<ExtArgs>;

  /**
   * `prisma.statuses`: Exposes CRUD operations for the **statuses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.statuses.findMany()
    * ```
    */
  get statuses(): Prisma.statusesDelegate<ExtArgs>;

  /**
   * `prisma.doctors`: Exposes CRUD operations for the **doctors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctors.findMany()
    * ```
    */
  get doctors(): Prisma.doctorsDelegate<ExtArgs>;

  /**
   * `prisma.patients`: Exposes CRUD operations for the **patients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patients.findMany()
    * ```
    */
  get patients(): Prisma.patientsDelegate<ExtArgs>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.scheduleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    tasks: 'tasks',
    calls: 'calls',
    statuses: 'statuses',
    doctors: 'doctors',
    patients: 'patients',
    schedule: 'schedule'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tasks" | "calls" | "statuses" | "doctors" | "patients" | "schedule"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      tasks: {
        payload: Prisma.$tasksPayload<ExtArgs>
        fields: Prisma.tasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findFirst: {
            args: Prisma.tasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findMany: {
            args: Prisma.tasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          create: {
            args: Prisma.tasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          createMany: {
            args: Prisma.tasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.tasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          update: {
            args: Prisma.tasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          deleteMany: {
            args: Prisma.tasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.tasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.tasksCountArgs<ExtArgs>
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
      calls: {
        payload: Prisma.$callsPayload<ExtArgs>
        fields: Prisma.callsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.callsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.callsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          findFirst: {
            args: Prisma.callsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.callsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          findMany: {
            args: Prisma.callsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>[]
          }
          create: {
            args: Prisma.callsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          createMany: {
            args: Prisma.callsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.callsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          update: {
            args: Prisma.callsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          deleteMany: {
            args: Prisma.callsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.callsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.callsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$callsPayload>
          }
          aggregate: {
            args: Prisma.CallsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalls>
          }
          groupBy: {
            args: Prisma.callsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CallsGroupByOutputType>[]
          }
          count: {
            args: Prisma.callsCountArgs<ExtArgs>
            result: $Utils.Optional<CallsCountAggregateOutputType> | number
          }
        }
      }
      statuses: {
        payload: Prisma.$statusesPayload<ExtArgs>
        fields: Prisma.statusesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.statusesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.statusesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          findFirst: {
            args: Prisma.statusesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.statusesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          findMany: {
            args: Prisma.statusesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>[]
          }
          create: {
            args: Prisma.statusesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          createMany: {
            args: Prisma.statusesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.statusesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          update: {
            args: Prisma.statusesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          deleteMany: {
            args: Prisma.statusesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.statusesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.statusesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$statusesPayload>
          }
          aggregate: {
            args: Prisma.StatusesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatuses>
          }
          groupBy: {
            args: Prisma.statusesGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusesGroupByOutputType>[]
          }
          count: {
            args: Prisma.statusesCountArgs<ExtArgs>
            result: $Utils.Optional<StatusesCountAggregateOutputType> | number
          }
        }
      }
      doctors: {
        payload: Prisma.$doctorsPayload<ExtArgs>
        fields: Prisma.doctorsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctorsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctorsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          findFirst: {
            args: Prisma.doctorsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctorsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          findMany: {
            args: Prisma.doctorsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>[]
          }
          create: {
            args: Prisma.doctorsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          createMany: {
            args: Prisma.doctorsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.doctorsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          update: {
            args: Prisma.doctorsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          deleteMany: {
            args: Prisma.doctorsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.doctorsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.doctorsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$doctorsPayload>
          }
          aggregate: {
            args: Prisma.DoctorsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctors>
          }
          groupBy: {
            args: Prisma.doctorsGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorsGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctorsCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorsCountAggregateOutputType> | number
          }
        }
      }
      patients: {
        payload: Prisma.$patientsPayload<ExtArgs>
        fields: Prisma.patientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.patientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.patientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          findFirst: {
            args: Prisma.patientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.patientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          findMany: {
            args: Prisma.patientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>[]
          }
          create: {
            args: Prisma.patientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          createMany: {
            args: Prisma.patientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.patientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          update: {
            args: Prisma.patientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          deleteMany: {
            args: Prisma.patientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.patientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.patientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$patientsPayload>
          }
          aggregate: {
            args: Prisma.PatientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatients>
          }
          groupBy: {
            args: Prisma.patientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.patientsCountArgs<ExtArgs>
            result: $Utils.Optional<PatientsCountAggregateOutputType> | number
          }
        }
      }
      schedule: {
        payload: Prisma.$schedulePayload<ExtArgs>
        fields: Prisma.scheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.scheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.scheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          findFirst: {
            args: Prisma.scheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.scheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          findMany: {
            args: Prisma.scheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>[]
          }
          create: {
            args: Prisma.scheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          createMany: {
            args: Prisma.scheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.scheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          update: {
            args: Prisma.scheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          deleteMany: {
            args: Prisma.scheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.scheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.scheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$schedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.scheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.scheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TasksCountOutputType
   */

  export type TasksCountOutputType = {
    calls: number
  }

  export type TasksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calls?: boolean | TasksCountOutputTypeCountCallsArgs
  }

  // Custom InputTypes
  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TasksCountOutputType
     */
    select?: TasksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TasksCountOutputType without action
   */
  export type TasksCountOutputTypeCountCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: callsWhereInput
  }


  /**
   * Count Type StatusesCountOutputType
   */

  export type StatusesCountOutputType = {
    calls: number
  }

  export type StatusesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calls?: boolean | StatusesCountOutputTypeCountCallsArgs
  }

  // Custom InputTypes
  /**
   * StatusesCountOutputType without action
   */
  export type StatusesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusesCountOutputType
     */
    select?: StatusesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StatusesCountOutputType without action
   */
  export type StatusesCountOutputTypeCountCallsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: callsWhereInput
  }


  /**
   * Count Type DoctorsCountOutputType
   */

  export type DoctorsCountOutputType = {
    schedule: number
  }

  export type DoctorsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | DoctorsCountOutputTypeCountScheduleArgs
  }

  // Custom InputTypes
  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorsCountOutputType
     */
    select?: DoctorsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorsCountOutputType without action
   */
  export type DoctorsCountOutputTypeCountScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scheduleWhereInput
  }


  /**
   * Count Type PatientsCountOutputType
   */

  export type PatientsCountOutputType = {
    schedule: number
  }

  export type PatientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | PatientsCountOutputTypeCountScheduleArgs
  }

  // Custom InputTypes
  /**
   * PatientsCountOutputType without action
   */
  export type PatientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientsCountOutputType
     */
    select?: PatientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientsCountOutputType without action
   */
  export type PatientsCountOutputTypeCountScheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scheduleWhereInput
  }


  /**
   * Count Type ScheduleCountOutputType
   */

  export type ScheduleCountOutputType = {
    tasks: number
  }

  export type ScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | ScheduleCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     */
    select?: ScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }


  /**
   * Models
   */

  /**
   * Model tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    Id: number | null
    count_calls: number | null
    status: number | null
    schedule_id: number | null
  }

  export type TasksSumAggregateOutputType = {
    Id: number | null
    count_calls: number | null
    status: number | null
    schedule_id: number | null
  }

  export type TasksMinAggregateOutputType = {
    Id: number | null
    count_calls: number | null
    number_phone: string | null
    status: number | null
    schedule_id: number | null
  }

  export type TasksMaxAggregateOutputType = {
    Id: number | null
    count_calls: number | null
    number_phone: string | null
    status: number | null
    schedule_id: number | null
  }

  export type TasksCountAggregateOutputType = {
    Id: number
    count_calls: number
    number_phone: number
    status: number
    info: number
    schedule_id: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    Id?: true
    count_calls?: true
    status?: true
    schedule_id?: true
  }

  export type TasksSumAggregateInputType = {
    Id?: true
    count_calls?: true
    status?: true
    schedule_id?: true
  }

  export type TasksMinAggregateInputType = {
    Id?: true
    count_calls?: true
    number_phone?: true
    status?: true
    schedule_id?: true
  }

  export type TasksMaxAggregateInputType = {
    Id?: true
    count_calls?: true
    number_phone?: true
    status?: true
    schedule_id?: true
  }

  export type TasksCountAggregateInputType = {
    Id?: true
    count_calls?: true
    number_phone?: true
    status?: true
    info?: true
    schedule_id?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to aggregate.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type tasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithAggregationInput | tasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: tasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    Id: number
    count_calls: number
    number_phone: string
    status: number
    info: JsonValue | null
    schedule_id: number
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends tasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type tasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    count_calls?: boolean
    number_phone?: boolean
    status?: boolean
    info?: boolean
    schedule_id?: boolean
    schedule?: boolean | scheduleDefaultArgs<ExtArgs>
    calls?: boolean | tasks$callsArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>


  export type tasksSelectScalar = {
    Id?: boolean
    count_calls?: boolean
    number_phone?: boolean
    status?: boolean
    info?: boolean
    schedule_id?: boolean
  }

  export type tasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | scheduleDefaultArgs<ExtArgs>
    calls?: boolean | tasks$callsArgs<ExtArgs>
    _count?: boolean | TasksCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $tasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tasks"
    objects: {
      schedule: Prisma.$schedulePayload<ExtArgs>
      calls: Prisma.$callsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: number
      count_calls: number
      number_phone: string
      status: number
      info: Prisma.JsonValue | null
      schedule_id: number
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }

  type tasksGetPayload<S extends boolean | null | undefined | tasksDefaultArgs> = $Result.GetResult<Prisma.$tasksPayload, S>

  type tasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tasksFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface tasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tasks'], meta: { name: 'tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {tasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tasksFindUniqueArgs>(args: SelectSubset<T, tasksFindUniqueArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tasks that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tasksFindUniqueOrThrowArgs>(args: SelectSubset<T, tasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tasksFindFirstArgs>(args?: SelectSubset<T, tasksFindFirstArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tasksFindFirstOrThrowArgs>(args?: SelectSubset<T, tasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { Id: true } })
     * 
     */
    findMany<T extends tasksFindManyArgs>(args?: SelectSubset<T, tasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tasks.
     * @param {tasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
     */
    create<T extends tasksCreateArgs>(args: SelectSubset<T, tasksCreateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {tasksCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tasksCreateManyArgs>(args?: SelectSubset<T, tasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tasks.
     * @param {tasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
     */
    delete<T extends tasksDeleteArgs>(args: SelectSubset<T, tasksDeleteArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tasks.
     * @param {tasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tasksUpdateArgs>(args: SelectSubset<T, tasksUpdateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {tasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tasksDeleteManyArgs>(args?: SelectSubset<T, tasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tasksUpdateManyArgs>(args: SelectSubset<T, tasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tasks.
     * @param {tasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
     */
    upsert<T extends tasksUpsertArgs>(args: SelectSubset<T, tasksUpsertArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends tasksCountArgs>(
      args?: Subset<T, tasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tasksGroupByArgs['orderBy'] }
        : { orderBy?: tasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tasks model
   */
  readonly fields: tasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends scheduleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, scheduleDefaultArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    calls<T extends tasks$callsArgs<ExtArgs> = {}>(args?: Subset<T, tasks$callsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tasks model
   */ 
  interface tasksFieldRefs {
    readonly Id: FieldRef<"tasks", 'Int'>
    readonly count_calls: FieldRef<"tasks", 'Int'>
    readonly number_phone: FieldRef<"tasks", 'String'>
    readonly status: FieldRef<"tasks", 'Int'>
    readonly info: FieldRef<"tasks", 'Json'>
    readonly schedule_id: FieldRef<"tasks", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * tasks findUnique
   */
  export type tasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findUniqueOrThrow
   */
  export type tasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findFirst
   */
  export type tasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findFirstOrThrow
   */
  export type tasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findMany
   */
  export type tasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks create
   */
  export type tasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to create a tasks.
     */
    data: XOR<tasksCreateInput, tasksUncheckedCreateInput>
  }

  /**
   * tasks createMany
   */
  export type tasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tasks update
   */
  export type tasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to update a tasks.
     */
    data: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
    /**
     * Choose, which tasks to update.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks updateMany
   */
  export type tasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
  }

  /**
   * tasks upsert
   */
  export type tasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The filter to search for the tasks to update in case it exists.
     */
    where: tasksWhereUniqueInput
    /**
     * In case the tasks found by the `where` argument doesn't exist, create a new tasks with this data.
     */
    create: XOR<tasksCreateInput, tasksUncheckedCreateInput>
    /**
     * In case the tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
  }

  /**
   * tasks delete
   */
  export type tasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter which tasks to delete.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks deleteMany
   */
  export type tasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to delete
     */
    where?: tasksWhereInput
  }

  /**
   * tasks.calls
   */
  export type tasks$callsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    where?: callsWhereInput
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    cursor?: callsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CallsScalarFieldEnum | CallsScalarFieldEnum[]
  }

  /**
   * tasks without action
   */
  export type tasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
  }


  /**
   * Model calls
   */

  export type AggregateCalls = {
    _count: CallsCountAggregateOutputType | null
    _avg: CallsAvgAggregateOutputType | null
    _sum: CallsSumAggregateOutputType | null
    _min: CallsMinAggregateOutputType | null
    _max: CallsMaxAggregateOutputType | null
  }

  export type CallsAvgAggregateOutputType = {
    Id_API: number | null
    task_id: number | null
    status_id: number | null
  }

  export type CallsSumAggregateOutputType = {
    Id_API: number | null
    task_id: number | null
    status_id: number | null
  }

  export type CallsMinAggregateOutputType = {
    Id_API: number | null
    task_id: number | null
    phone: string | null
    status_id: number | null
  }

  export type CallsMaxAggregateOutputType = {
    Id_API: number | null
    task_id: number | null
    phone: string | null
    status_id: number | null
  }

  export type CallsCountAggregateOutputType = {
    Id_API: number
    task_id: number
    phone: number
    status_id: number
    info_result: number
    _all: number
  }


  export type CallsAvgAggregateInputType = {
    Id_API?: true
    task_id?: true
    status_id?: true
  }

  export type CallsSumAggregateInputType = {
    Id_API?: true
    task_id?: true
    status_id?: true
  }

  export type CallsMinAggregateInputType = {
    Id_API?: true
    task_id?: true
    phone?: true
    status_id?: true
  }

  export type CallsMaxAggregateInputType = {
    Id_API?: true
    task_id?: true
    phone?: true
    status_id?: true
  }

  export type CallsCountAggregateInputType = {
    Id_API?: true
    task_id?: true
    phone?: true
    status_id?: true
    info_result?: true
    _all?: true
  }

  export type CallsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which calls to aggregate.
     */
    where?: callsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calls to fetch.
     */
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: callsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned calls
    **/
    _count?: true | CallsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CallsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CallsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CallsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CallsMaxAggregateInputType
  }

  export type GetCallsAggregateType<T extends CallsAggregateArgs> = {
        [P in keyof T & keyof AggregateCalls]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalls[P]>
      : GetScalarType<T[P], AggregateCalls[P]>
  }




  export type callsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: callsWhereInput
    orderBy?: callsOrderByWithAggregationInput | callsOrderByWithAggregationInput[]
    by: CallsScalarFieldEnum[] | CallsScalarFieldEnum
    having?: callsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CallsCountAggregateInputType | true
    _avg?: CallsAvgAggregateInputType
    _sum?: CallsSumAggregateInputType
    _min?: CallsMinAggregateInputType
    _max?: CallsMaxAggregateInputType
  }

  export type CallsGroupByOutputType = {
    Id_API: number
    task_id: number
    phone: string
    status_id: number
    info_result: JsonValue | null
    _count: CallsCountAggregateOutputType | null
    _avg: CallsAvgAggregateOutputType | null
    _sum: CallsSumAggregateOutputType | null
    _min: CallsMinAggregateOutputType | null
    _max: CallsMaxAggregateOutputType | null
  }

  type GetCallsGroupByPayload<T extends callsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CallsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CallsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CallsGroupByOutputType[P]>
            : GetScalarType<T[P], CallsGroupByOutputType[P]>
        }
      >
    >


  export type callsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id_API?: boolean
    task_id?: boolean
    phone?: boolean
    status_id?: boolean
    info_result?: boolean
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    statuses?: boolean | statusesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calls"]>


  export type callsSelectScalar = {
    Id_API?: boolean
    task_id?: boolean
    phone?: boolean
    status_id?: boolean
    info_result?: boolean
  }

  export type callsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | tasksDefaultArgs<ExtArgs>
    statuses?: boolean | statusesDefaultArgs<ExtArgs>
  }

  export type $callsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "calls"
    objects: {
      tasks: Prisma.$tasksPayload<ExtArgs>
      statuses: Prisma.$statusesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id_API: number
      task_id: number
      phone: string
      status_id: number
      info_result: Prisma.JsonValue | null
    }, ExtArgs["result"]["calls"]>
    composites: {}
  }

  type callsGetPayload<S extends boolean | null | undefined | callsDefaultArgs> = $Result.GetResult<Prisma.$callsPayload, S>

  type callsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<callsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CallsCountAggregateInputType | true
    }

  export interface callsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['calls'], meta: { name: 'calls' } }
    /**
     * Find zero or one Calls that matches the filter.
     * @param {callsFindUniqueArgs} args - Arguments to find a Calls
     * @example
     * // Get one Calls
     * const calls = await prisma.calls.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends callsFindUniqueArgs>(args: SelectSubset<T, callsFindUniqueArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Calls that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {callsFindUniqueOrThrowArgs} args - Arguments to find a Calls
     * @example
     * // Get one Calls
     * const calls = await prisma.calls.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends callsFindUniqueOrThrowArgs>(args: SelectSubset<T, callsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Calls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsFindFirstArgs} args - Arguments to find a Calls
     * @example
     * // Get one Calls
     * const calls = await prisma.calls.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends callsFindFirstArgs>(args?: SelectSubset<T, callsFindFirstArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Calls that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsFindFirstOrThrowArgs} args - Arguments to find a Calls
     * @example
     * // Get one Calls
     * const calls = await prisma.calls.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends callsFindFirstOrThrowArgs>(args?: SelectSubset<T, callsFindFirstOrThrowArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Calls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Calls
     * const calls = await prisma.calls.findMany()
     * 
     * // Get first 10 Calls
     * const calls = await prisma.calls.findMany({ take: 10 })
     * 
     * // Only select the `Id_API`
     * const callsWithId_APIOnly = await prisma.calls.findMany({ select: { Id_API: true } })
     * 
     */
    findMany<T extends callsFindManyArgs>(args?: SelectSubset<T, callsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Calls.
     * @param {callsCreateArgs} args - Arguments to create a Calls.
     * @example
     * // Create one Calls
     * const Calls = await prisma.calls.create({
     *   data: {
     *     // ... data to create a Calls
     *   }
     * })
     * 
     */
    create<T extends callsCreateArgs>(args: SelectSubset<T, callsCreateArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Calls.
     * @param {callsCreateManyArgs} args - Arguments to create many Calls.
     * @example
     * // Create many Calls
     * const calls = await prisma.calls.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends callsCreateManyArgs>(args?: SelectSubset<T, callsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Calls.
     * @param {callsDeleteArgs} args - Arguments to delete one Calls.
     * @example
     * // Delete one Calls
     * const Calls = await prisma.calls.delete({
     *   where: {
     *     // ... filter to delete one Calls
     *   }
     * })
     * 
     */
    delete<T extends callsDeleteArgs>(args: SelectSubset<T, callsDeleteArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Calls.
     * @param {callsUpdateArgs} args - Arguments to update one Calls.
     * @example
     * // Update one Calls
     * const calls = await prisma.calls.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends callsUpdateArgs>(args: SelectSubset<T, callsUpdateArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Calls.
     * @param {callsDeleteManyArgs} args - Arguments to filter Calls to delete.
     * @example
     * // Delete a few Calls
     * const { count } = await prisma.calls.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends callsDeleteManyArgs>(args?: SelectSubset<T, callsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Calls
     * const calls = await prisma.calls.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends callsUpdateManyArgs>(args: SelectSubset<T, callsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Calls.
     * @param {callsUpsertArgs} args - Arguments to update or create a Calls.
     * @example
     * // Update or create a Calls
     * const calls = await prisma.calls.upsert({
     *   create: {
     *     // ... data to create a Calls
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Calls we want to update
     *   }
     * })
     */
    upsert<T extends callsUpsertArgs>(args: SelectSubset<T, callsUpsertArgs<ExtArgs>>): Prisma__callsClient<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsCountArgs} args - Arguments to filter Calls to count.
     * @example
     * // Count the number of Calls
     * const count = await prisma.calls.count({
     *   where: {
     *     // ... the filter for the Calls we want to count
     *   }
     * })
    **/
    count<T extends callsCountArgs>(
      args?: Subset<T, callsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CallsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CallsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CallsAggregateArgs>(args: Subset<T, CallsAggregateArgs>): Prisma.PrismaPromise<GetCallsAggregateType<T>>

    /**
     * Group by Calls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {callsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends callsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: callsGroupByArgs['orderBy'] }
        : { orderBy?: callsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, callsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCallsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the calls model
   */
  readonly fields: callsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for calls.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__callsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends tasksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, tasksDefaultArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    statuses<T extends statusesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, statusesDefaultArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the calls model
   */ 
  interface callsFieldRefs {
    readonly Id_API: FieldRef<"calls", 'Int'>
    readonly task_id: FieldRef<"calls", 'Int'>
    readonly phone: FieldRef<"calls", 'String'>
    readonly status_id: FieldRef<"calls", 'Int'>
    readonly info_result: FieldRef<"calls", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * calls findUnique
   */
  export type callsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter, which calls to fetch.
     */
    where: callsWhereUniqueInput
  }

  /**
   * calls findUniqueOrThrow
   */
  export type callsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter, which calls to fetch.
     */
    where: callsWhereUniqueInput
  }

  /**
   * calls findFirst
   */
  export type callsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter, which calls to fetch.
     */
    where?: callsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calls to fetch.
     */
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for calls.
     */
    cursor?: callsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of calls.
     */
    distinct?: CallsScalarFieldEnum | CallsScalarFieldEnum[]
  }

  /**
   * calls findFirstOrThrow
   */
  export type callsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter, which calls to fetch.
     */
    where?: callsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calls to fetch.
     */
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for calls.
     */
    cursor?: callsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of calls.
     */
    distinct?: CallsScalarFieldEnum | CallsScalarFieldEnum[]
  }

  /**
   * calls findMany
   */
  export type callsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter, which calls to fetch.
     */
    where?: callsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of calls to fetch.
     */
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing calls.
     */
    cursor?: callsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` calls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` calls.
     */
    skip?: number
    distinct?: CallsScalarFieldEnum | CallsScalarFieldEnum[]
  }

  /**
   * calls create
   */
  export type callsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * The data needed to create a calls.
     */
    data: XOR<callsCreateInput, callsUncheckedCreateInput>
  }

  /**
   * calls createMany
   */
  export type callsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many calls.
     */
    data: callsCreateManyInput | callsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * calls update
   */
  export type callsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * The data needed to update a calls.
     */
    data: XOR<callsUpdateInput, callsUncheckedUpdateInput>
    /**
     * Choose, which calls to update.
     */
    where: callsWhereUniqueInput
  }

  /**
   * calls updateMany
   */
  export type callsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update calls.
     */
    data: XOR<callsUpdateManyMutationInput, callsUncheckedUpdateManyInput>
    /**
     * Filter which calls to update
     */
    where?: callsWhereInput
  }

  /**
   * calls upsert
   */
  export type callsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * The filter to search for the calls to update in case it exists.
     */
    where: callsWhereUniqueInput
    /**
     * In case the calls found by the `where` argument doesn't exist, create a new calls with this data.
     */
    create: XOR<callsCreateInput, callsUncheckedCreateInput>
    /**
     * In case the calls was found with the provided `where` argument, update it with this data.
     */
    update: XOR<callsUpdateInput, callsUncheckedUpdateInput>
  }

  /**
   * calls delete
   */
  export type callsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    /**
     * Filter which calls to delete.
     */
    where: callsWhereUniqueInput
  }

  /**
   * calls deleteMany
   */
  export type callsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which calls to delete
     */
    where?: callsWhereInput
  }

  /**
   * calls without action
   */
  export type callsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
  }


  /**
   * Model statuses
   */

  export type AggregateStatuses = {
    _count: StatusesCountAggregateOutputType | null
    _avg: StatusesAvgAggregateOutputType | null
    _sum: StatusesSumAggregateOutputType | null
    _min: StatusesMinAggregateOutputType | null
    _max: StatusesMaxAggregateOutputType | null
  }

  export type StatusesAvgAggregateOutputType = {
    statuse_id: number | null
  }

  export type StatusesSumAggregateOutputType = {
    statuse_id: number | null
  }

  export type StatusesMinAggregateOutputType = {
    statuse_id: number | null
    name_statuse: string | null
  }

  export type StatusesMaxAggregateOutputType = {
    statuse_id: number | null
    name_statuse: string | null
  }

  export type StatusesCountAggregateOutputType = {
    statuse_id: number
    name_statuse: number
    _all: number
  }


  export type StatusesAvgAggregateInputType = {
    statuse_id?: true
  }

  export type StatusesSumAggregateInputType = {
    statuse_id?: true
  }

  export type StatusesMinAggregateInputType = {
    statuse_id?: true
    name_statuse?: true
  }

  export type StatusesMaxAggregateInputType = {
    statuse_id?: true
    name_statuse?: true
  }

  export type StatusesCountAggregateInputType = {
    statuse_id?: true
    name_statuse?: true
    _all?: true
  }

  export type StatusesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statuses to aggregate.
     */
    where?: statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusesOrderByWithRelationInput | statusesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned statuses
    **/
    _count?: true | StatusesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusesMaxAggregateInputType
  }

  export type GetStatusesAggregateType<T extends StatusesAggregateArgs> = {
        [P in keyof T & keyof AggregateStatuses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatuses[P]>
      : GetScalarType<T[P], AggregateStatuses[P]>
  }




  export type statusesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: statusesWhereInput
    orderBy?: statusesOrderByWithAggregationInput | statusesOrderByWithAggregationInput[]
    by: StatusesScalarFieldEnum[] | StatusesScalarFieldEnum
    having?: statusesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusesCountAggregateInputType | true
    _avg?: StatusesAvgAggregateInputType
    _sum?: StatusesSumAggregateInputType
    _min?: StatusesMinAggregateInputType
    _max?: StatusesMaxAggregateInputType
  }

  export type StatusesGroupByOutputType = {
    statuse_id: number
    name_statuse: string
    _count: StatusesCountAggregateOutputType | null
    _avg: StatusesAvgAggregateOutputType | null
    _sum: StatusesSumAggregateOutputType | null
    _min: StatusesMinAggregateOutputType | null
    _max: StatusesMaxAggregateOutputType | null
  }

  type GetStatusesGroupByPayload<T extends statusesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusesGroupByOutputType[P]>
            : GetScalarType<T[P], StatusesGroupByOutputType[P]>
        }
      >
    >


  export type statusesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    statuse_id?: boolean
    name_statuse?: boolean
    calls?: boolean | statuses$callsArgs<ExtArgs>
    _count?: boolean | StatusesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statuses"]>


  export type statusesSelectScalar = {
    statuse_id?: boolean
    name_statuse?: boolean
  }

  export type statusesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    calls?: boolean | statuses$callsArgs<ExtArgs>
    _count?: boolean | StatusesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $statusesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "statuses"
    objects: {
      calls: Prisma.$callsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      statuse_id: number
      name_statuse: string
    }, ExtArgs["result"]["statuses"]>
    composites: {}
  }

  type statusesGetPayload<S extends boolean | null | undefined | statusesDefaultArgs> = $Result.GetResult<Prisma.$statusesPayload, S>

  type statusesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<statusesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StatusesCountAggregateInputType | true
    }

  export interface statusesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['statuses'], meta: { name: 'statuses' } }
    /**
     * Find zero or one Statuses that matches the filter.
     * @param {statusesFindUniqueArgs} args - Arguments to find a Statuses
     * @example
     * // Get one Statuses
     * const statuses = await prisma.statuses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends statusesFindUniqueArgs>(args: SelectSubset<T, statusesFindUniqueArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Statuses that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {statusesFindUniqueOrThrowArgs} args - Arguments to find a Statuses
     * @example
     * // Get one Statuses
     * const statuses = await prisma.statuses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends statusesFindUniqueOrThrowArgs>(args: SelectSubset<T, statusesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesFindFirstArgs} args - Arguments to find a Statuses
     * @example
     * // Get one Statuses
     * const statuses = await prisma.statuses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends statusesFindFirstArgs>(args?: SelectSubset<T, statusesFindFirstArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Statuses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesFindFirstOrThrowArgs} args - Arguments to find a Statuses
     * @example
     * // Get one Statuses
     * const statuses = await prisma.statuses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends statusesFindFirstOrThrowArgs>(args?: SelectSubset<T, statusesFindFirstOrThrowArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.statuses.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.statuses.findMany({ take: 10 })
     * 
     * // Only select the `statuse_id`
     * const statusesWithStatuse_idOnly = await prisma.statuses.findMany({ select: { statuse_id: true } })
     * 
     */
    findMany<T extends statusesFindManyArgs>(args?: SelectSubset<T, statusesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Statuses.
     * @param {statusesCreateArgs} args - Arguments to create a Statuses.
     * @example
     * // Create one Statuses
     * const Statuses = await prisma.statuses.create({
     *   data: {
     *     // ... data to create a Statuses
     *   }
     * })
     * 
     */
    create<T extends statusesCreateArgs>(args: SelectSubset<T, statusesCreateArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Statuses.
     * @param {statusesCreateManyArgs} args - Arguments to create many Statuses.
     * @example
     * // Create many Statuses
     * const statuses = await prisma.statuses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends statusesCreateManyArgs>(args?: SelectSubset<T, statusesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Statuses.
     * @param {statusesDeleteArgs} args - Arguments to delete one Statuses.
     * @example
     * // Delete one Statuses
     * const Statuses = await prisma.statuses.delete({
     *   where: {
     *     // ... filter to delete one Statuses
     *   }
     * })
     * 
     */
    delete<T extends statusesDeleteArgs>(args: SelectSubset<T, statusesDeleteArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Statuses.
     * @param {statusesUpdateArgs} args - Arguments to update one Statuses.
     * @example
     * // Update one Statuses
     * const statuses = await prisma.statuses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends statusesUpdateArgs>(args: SelectSubset<T, statusesUpdateArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Statuses.
     * @param {statusesDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.statuses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends statusesDeleteManyArgs>(args?: SelectSubset<T, statusesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const statuses = await prisma.statuses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends statusesUpdateManyArgs>(args: SelectSubset<T, statusesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Statuses.
     * @param {statusesUpsertArgs} args - Arguments to update or create a Statuses.
     * @example
     * // Update or create a Statuses
     * const statuses = await prisma.statuses.upsert({
     *   create: {
     *     // ... data to create a Statuses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Statuses we want to update
     *   }
     * })
     */
    upsert<T extends statusesUpsertArgs>(args: SelectSubset<T, statusesUpsertArgs<ExtArgs>>): Prisma__statusesClient<$Result.GetResult<Prisma.$statusesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.statuses.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends statusesCountArgs>(
      args?: Subset<T, statusesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusesAggregateArgs>(args: Subset<T, StatusesAggregateArgs>): Prisma.PrismaPromise<GetStatusesAggregateType<T>>

    /**
     * Group by Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {statusesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends statusesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: statusesGroupByArgs['orderBy'] }
        : { orderBy?: statusesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, statusesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the statuses model
   */
  readonly fields: statusesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for statuses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__statusesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    calls<T extends statuses$callsArgs<ExtArgs> = {}>(args?: Subset<T, statuses$callsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$callsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the statuses model
   */ 
  interface statusesFieldRefs {
    readonly statuse_id: FieldRef<"statuses", 'Int'>
    readonly name_statuse: FieldRef<"statuses", 'String'>
  }
    

  // Custom InputTypes
  /**
   * statuses findUnique
   */
  export type statusesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where: statusesWhereUniqueInput
  }

  /**
   * statuses findUniqueOrThrow
   */
  export type statusesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where: statusesWhereUniqueInput
  }

  /**
   * statuses findFirst
   */
  export type statusesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where?: statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusesOrderByWithRelationInput | statusesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: StatusesScalarFieldEnum | StatusesScalarFieldEnum[]
  }

  /**
   * statuses findFirstOrThrow
   */
  export type statusesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where?: statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusesOrderByWithRelationInput | statusesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for statuses.
     */
    cursor?: statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of statuses.
     */
    distinct?: StatusesScalarFieldEnum | StatusesScalarFieldEnum[]
  }

  /**
   * statuses findMany
   */
  export type statusesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter, which statuses to fetch.
     */
    where?: statusesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of statuses to fetch.
     */
    orderBy?: statusesOrderByWithRelationInput | statusesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing statuses.
     */
    cursor?: statusesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` statuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` statuses.
     */
    skip?: number
    distinct?: StatusesScalarFieldEnum | StatusesScalarFieldEnum[]
  }

  /**
   * statuses create
   */
  export type statusesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * The data needed to create a statuses.
     */
    data: XOR<statusesCreateInput, statusesUncheckedCreateInput>
  }

  /**
   * statuses createMany
   */
  export type statusesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many statuses.
     */
    data: statusesCreateManyInput | statusesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * statuses update
   */
  export type statusesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * The data needed to update a statuses.
     */
    data: XOR<statusesUpdateInput, statusesUncheckedUpdateInput>
    /**
     * Choose, which statuses to update.
     */
    where: statusesWhereUniqueInput
  }

  /**
   * statuses updateMany
   */
  export type statusesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update statuses.
     */
    data: XOR<statusesUpdateManyMutationInput, statusesUncheckedUpdateManyInput>
    /**
     * Filter which statuses to update
     */
    where?: statusesWhereInput
  }

  /**
   * statuses upsert
   */
  export type statusesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * The filter to search for the statuses to update in case it exists.
     */
    where: statusesWhereUniqueInput
    /**
     * In case the statuses found by the `where` argument doesn't exist, create a new statuses with this data.
     */
    create: XOR<statusesCreateInput, statusesUncheckedCreateInput>
    /**
     * In case the statuses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<statusesUpdateInput, statusesUncheckedUpdateInput>
  }

  /**
   * statuses delete
   */
  export type statusesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
    /**
     * Filter which statuses to delete.
     */
    where: statusesWhereUniqueInput
  }

  /**
   * statuses deleteMany
   */
  export type statusesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which statuses to delete
     */
    where?: statusesWhereInput
  }

  /**
   * statuses.calls
   */
  export type statuses$callsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the calls
     */
    select?: callsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: callsInclude<ExtArgs> | null
    where?: callsWhereInput
    orderBy?: callsOrderByWithRelationInput | callsOrderByWithRelationInput[]
    cursor?: callsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CallsScalarFieldEnum | CallsScalarFieldEnum[]
  }

  /**
   * statuses without action
   */
  export type statusesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the statuses
     */
    select?: statusesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: statusesInclude<ExtArgs> | null
  }


  /**
   * Model doctors
   */

  export type AggregateDoctors = {
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  export type DoctorsAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type DoctorsSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type DoctorsMinAggregateOutputType = {
    id: number | null
    name: string | null
    spec: string | null
    price: number | null
  }

  export type DoctorsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    spec: string | null
    price: number | null
  }

  export type DoctorsCountAggregateOutputType = {
    id: number
    name: number
    spec: number
    price: number
    _all: number
  }


  export type DoctorsAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type DoctorsSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type DoctorsMinAggregateInputType = {
    id?: true
    name?: true
    spec?: true
    price?: true
  }

  export type DoctorsMaxAggregateInputType = {
    id?: true
    name?: true
    spec?: true
    price?: true
  }

  export type DoctorsCountAggregateInputType = {
    id?: true
    name?: true
    spec?: true
    price?: true
    _all?: true
  }

  export type DoctorsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctors to aggregate.
     */
    where?: doctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorsOrderByWithRelationInput | doctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctors
    **/
    _count?: true | DoctorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorsMaxAggregateInputType
  }

  export type GetDoctorsAggregateType<T extends DoctorsAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctors[P]>
      : GetScalarType<T[P], AggregateDoctors[P]>
  }




  export type doctorsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctorsWhereInput
    orderBy?: doctorsOrderByWithAggregationInput | doctorsOrderByWithAggregationInput[]
    by: DoctorsScalarFieldEnum[] | DoctorsScalarFieldEnum
    having?: doctorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorsCountAggregateInputType | true
    _avg?: DoctorsAvgAggregateInputType
    _sum?: DoctorsSumAggregateInputType
    _min?: DoctorsMinAggregateInputType
    _max?: DoctorsMaxAggregateInputType
  }

  export type DoctorsGroupByOutputType = {
    id: number
    name: string
    spec: string
    price: number
    _count: DoctorsCountAggregateOutputType | null
    _avg: DoctorsAvgAggregateOutputType | null
    _sum: DoctorsSumAggregateOutputType | null
    _min: DoctorsMinAggregateOutputType | null
    _max: DoctorsMaxAggregateOutputType | null
  }

  type GetDoctorsGroupByPayload<T extends doctorsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorsGroupByOutputType[P]>
        }
      >
    >


  export type doctorsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    spec?: boolean
    price?: boolean
    schedule?: boolean | doctors$scheduleArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctors"]>


  export type doctorsSelectScalar = {
    id?: boolean
    name?: boolean
    spec?: boolean
    price?: boolean
  }

  export type doctorsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | doctors$scheduleArgs<ExtArgs>
    _count?: boolean | DoctorsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $doctorsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctors"
    objects: {
      schedule: Prisma.$schedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      spec: string
      price: number
    }, ExtArgs["result"]["doctors"]>
    composites: {}
  }

  type doctorsGetPayload<S extends boolean | null | undefined | doctorsDefaultArgs> = $Result.GetResult<Prisma.$doctorsPayload, S>

  type doctorsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctorsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorsCountAggregateInputType | true
    }

  export interface doctorsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctors'], meta: { name: 'doctors' } }
    /**
     * Find zero or one Doctors that matches the filter.
     * @param {doctorsFindUniqueArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends doctorsFindUniqueArgs>(args: SelectSubset<T, doctorsFindUniqueArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Doctors that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctorsFindUniqueOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends doctorsFindUniqueOrThrowArgs>(args: SelectSubset<T, doctorsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsFindFirstArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends doctorsFindFirstArgs>(args?: SelectSubset<T, doctorsFindFirstArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Doctors that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsFindFirstOrThrowArgs} args - Arguments to find a Doctors
     * @example
     * // Get one Doctors
     * const doctors = await prisma.doctors.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends doctorsFindFirstOrThrowArgs>(args?: SelectSubset<T, doctorsFindFirstOrThrowArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctors.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctors.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorsWithIdOnly = await prisma.doctors.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends doctorsFindManyArgs>(args?: SelectSubset<T, doctorsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Doctors.
     * @param {doctorsCreateArgs} args - Arguments to create a Doctors.
     * @example
     * // Create one Doctors
     * const Doctors = await prisma.doctors.create({
     *   data: {
     *     // ... data to create a Doctors
     *   }
     * })
     * 
     */
    create<T extends doctorsCreateArgs>(args: SelectSubset<T, doctorsCreateArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {doctorsCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctors = await prisma.doctors.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends doctorsCreateManyArgs>(args?: SelectSubset<T, doctorsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctors.
     * @param {doctorsDeleteArgs} args - Arguments to delete one Doctors.
     * @example
     * // Delete one Doctors
     * const Doctors = await prisma.doctors.delete({
     *   where: {
     *     // ... filter to delete one Doctors
     *   }
     * })
     * 
     */
    delete<T extends doctorsDeleteArgs>(args: SelectSubset<T, doctorsDeleteArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Doctors.
     * @param {doctorsUpdateArgs} args - Arguments to update one Doctors.
     * @example
     * // Update one Doctors
     * const doctors = await prisma.doctors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends doctorsUpdateArgs>(args: SelectSubset<T, doctorsUpdateArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {doctorsDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends doctorsDeleteManyArgs>(args?: SelectSubset<T, doctorsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctors = await prisma.doctors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends doctorsUpdateManyArgs>(args: SelectSubset<T, doctorsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctors.
     * @param {doctorsUpsertArgs} args - Arguments to update or create a Doctors.
     * @example
     * // Update or create a Doctors
     * const doctors = await prisma.doctors.upsert({
     *   create: {
     *     // ... data to create a Doctors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctors we want to update
     *   }
     * })
     */
    upsert<T extends doctorsUpsertArgs>(args: SelectSubset<T, doctorsUpsertArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctors.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends doctorsCountArgs>(
      args?: Subset<T, doctorsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorsAggregateArgs>(args: Subset<T, DoctorsAggregateArgs>): Prisma.PrismaPromise<GetDoctorsAggregateType<T>>

    /**
     * Group by Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctorsGroupByArgs['orderBy'] }
        : { orderBy?: doctorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctors model
   */
  readonly fields: doctorsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctorsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends doctors$scheduleArgs<ExtArgs> = {}>(args?: Subset<T, doctors$scheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the doctors model
   */ 
  interface doctorsFieldRefs {
    readonly id: FieldRef<"doctors", 'Int'>
    readonly name: FieldRef<"doctors", 'String'>
    readonly spec: FieldRef<"doctors", 'String'>
    readonly price: FieldRef<"doctors", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * doctors findUnique
   */
  export type doctorsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where: doctorsWhereUniqueInput
  }

  /**
   * doctors findUniqueOrThrow
   */
  export type doctorsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where: doctorsWhereUniqueInput
  }

  /**
   * doctors findFirst
   */
  export type doctorsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where?: doctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorsOrderByWithRelationInput | doctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * doctors findFirstOrThrow
   */
  export type doctorsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where?: doctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorsOrderByWithRelationInput | doctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * doctors findMany
   */
  export type doctorsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where?: doctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorsOrderByWithRelationInput | doctorsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctors.
     */
    cursor?: doctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    distinct?: DoctorsScalarFieldEnum | DoctorsScalarFieldEnum[]
  }

  /**
   * doctors create
   */
  export type doctorsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * The data needed to create a doctors.
     */
    data: XOR<doctorsCreateInput, doctorsUncheckedCreateInput>
  }

  /**
   * doctors createMany
   */
  export type doctorsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctors.
     */
    data: doctorsCreateManyInput | doctorsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctors update
   */
  export type doctorsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * The data needed to update a doctors.
     */
    data: XOR<doctorsUpdateInput, doctorsUncheckedUpdateInput>
    /**
     * Choose, which doctors to update.
     */
    where: doctorsWhereUniqueInput
  }

  /**
   * doctors updateMany
   */
  export type doctorsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctors.
     */
    data: XOR<doctorsUpdateManyMutationInput, doctorsUncheckedUpdateManyInput>
    /**
     * Filter which doctors to update
     */
    where?: doctorsWhereInput
  }

  /**
   * doctors upsert
   */
  export type doctorsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * The filter to search for the doctors to update in case it exists.
     */
    where: doctorsWhereUniqueInput
    /**
     * In case the doctors found by the `where` argument doesn't exist, create a new doctors with this data.
     */
    create: XOR<doctorsCreateInput, doctorsUncheckedCreateInput>
    /**
     * In case the doctors was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctorsUpdateInput, doctorsUncheckedUpdateInput>
  }

  /**
   * doctors delete
   */
  export type doctorsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
    /**
     * Filter which doctors to delete.
     */
    where: doctorsWhereUniqueInput
  }

  /**
   * doctors deleteMany
   */
  export type doctorsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctors to delete
     */
    where?: doctorsWhereInput
  }

  /**
   * doctors.schedule
   */
  export type doctors$scheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    where?: scheduleWhereInput
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    cursor?: scheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * doctors without action
   */
  export type doctorsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctors
     */
    select?: doctorsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorsInclude<ExtArgs> | null
  }


  /**
   * Model patients
   */

  export type AggregatePatients = {
    _count: PatientsCountAggregateOutputType | null
    _avg: PatientsAvgAggregateOutputType | null
    _sum: PatientsSumAggregateOutputType | null
    _min: PatientsMinAggregateOutputType | null
    _max: PatientsMaxAggregateOutputType | null
  }

  export type PatientsAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientsSumAggregateOutputType = {
    id: number | null
  }

  export type PatientsMinAggregateOutputType = {
    id: number | null
    phone: string | null
    name: string | null
    email: string | null
    gender: string | null
  }

  export type PatientsMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    name: string | null
    email: string | null
    gender: string | null
  }

  export type PatientsCountAggregateOutputType = {
    id: number
    phone: number
    name: number
    email: number
    gender: number
    _all: number
  }


  export type PatientsAvgAggregateInputType = {
    id?: true
  }

  export type PatientsSumAggregateInputType = {
    id?: true
  }

  export type PatientsMinAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    email?: true
    gender?: true
  }

  export type PatientsMaxAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    email?: true
    gender?: true
  }

  export type PatientsCountAggregateInputType = {
    id?: true
    phone?: true
    name?: true
    email?: true
    gender?: true
    _all?: true
  }

  export type PatientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patients to aggregate.
     */
    where?: patientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientsOrderByWithRelationInput | patientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patients
    **/
    _count?: true | PatientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientsMaxAggregateInputType
  }

  export type GetPatientsAggregateType<T extends PatientsAggregateArgs> = {
        [P in keyof T & keyof AggregatePatients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatients[P]>
      : GetScalarType<T[P], AggregatePatients[P]>
  }




  export type patientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patientsWhereInput
    orderBy?: patientsOrderByWithAggregationInput | patientsOrderByWithAggregationInput[]
    by: PatientsScalarFieldEnum[] | PatientsScalarFieldEnum
    having?: patientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientsCountAggregateInputType | true
    _avg?: PatientsAvgAggregateInputType
    _sum?: PatientsSumAggregateInputType
    _min?: PatientsMinAggregateInputType
    _max?: PatientsMaxAggregateInputType
  }

  export type PatientsGroupByOutputType = {
    id: number
    phone: string
    name: string
    email: string
    gender: string
    _count: PatientsCountAggregateOutputType | null
    _avg: PatientsAvgAggregateOutputType | null
    _sum: PatientsSumAggregateOutputType | null
    _min: PatientsMinAggregateOutputType | null
    _max: PatientsMaxAggregateOutputType | null
  }

  type GetPatientsGroupByPayload<T extends patientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientsGroupByOutputType[P]>
            : GetScalarType<T[P], PatientsGroupByOutputType[P]>
        }
      >
    >


  export type patientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    name?: boolean
    email?: boolean
    gender?: boolean
    schedule?: boolean | patients$scheduleArgs<ExtArgs>
    _count?: boolean | PatientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patients"]>


  export type patientsSelectScalar = {
    id?: boolean
    phone?: boolean
    name?: boolean
    email?: boolean
    gender?: boolean
  }

  export type patientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedule?: boolean | patients$scheduleArgs<ExtArgs>
    _count?: boolean | PatientsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $patientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "patients"
    objects: {
      schedule: Prisma.$schedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phone: string
      name: string
      email: string
      gender: string
    }, ExtArgs["result"]["patients"]>
    composites: {}
  }

  type patientsGetPayload<S extends boolean | null | undefined | patientsDefaultArgs> = $Result.GetResult<Prisma.$patientsPayload, S>

  type patientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<patientsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientsCountAggregateInputType | true
    }

  export interface patientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['patients'], meta: { name: 'patients' } }
    /**
     * Find zero or one Patients that matches the filter.
     * @param {patientsFindUniqueArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends patientsFindUniqueArgs>(args: SelectSubset<T, patientsFindUniqueArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patients that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {patientsFindUniqueOrThrowArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends patientsFindUniqueOrThrowArgs>(args: SelectSubset<T, patientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsFindFirstArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends patientsFindFirstArgs>(args?: SelectSubset<T, patientsFindFirstArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsFindFirstOrThrowArgs} args - Arguments to find a Patients
     * @example
     * // Get one Patients
     * const patients = await prisma.patients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends patientsFindFirstOrThrowArgs>(args?: SelectSubset<T, patientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patients.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patients.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientsWithIdOnly = await prisma.patients.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends patientsFindManyArgs>(args?: SelectSubset<T, patientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patients.
     * @param {patientsCreateArgs} args - Arguments to create a Patients.
     * @example
     * // Create one Patients
     * const Patients = await prisma.patients.create({
     *   data: {
     *     // ... data to create a Patients
     *   }
     * })
     * 
     */
    create<T extends patientsCreateArgs>(args: SelectSubset<T, patientsCreateArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {patientsCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patients = await prisma.patients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends patientsCreateManyArgs>(args?: SelectSubset<T, patientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patients.
     * @param {patientsDeleteArgs} args - Arguments to delete one Patients.
     * @example
     * // Delete one Patients
     * const Patients = await prisma.patients.delete({
     *   where: {
     *     // ... filter to delete one Patients
     *   }
     * })
     * 
     */
    delete<T extends patientsDeleteArgs>(args: SelectSubset<T, patientsDeleteArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patients.
     * @param {patientsUpdateArgs} args - Arguments to update one Patients.
     * @example
     * // Update one Patients
     * const patients = await prisma.patients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends patientsUpdateArgs>(args: SelectSubset<T, patientsUpdateArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {patientsDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends patientsDeleteManyArgs>(args?: SelectSubset<T, patientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patients = await prisma.patients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends patientsUpdateManyArgs>(args: SelectSubset<T, patientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patients.
     * @param {patientsUpsertArgs} args - Arguments to update or create a Patients.
     * @example
     * // Update or create a Patients
     * const patients = await prisma.patients.upsert({
     *   create: {
     *     // ... data to create a Patients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patients we want to update
     *   }
     * })
     */
    upsert<T extends patientsUpsertArgs>(args: SelectSubset<T, patientsUpsertArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patients.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends patientsCountArgs>(
      args?: Subset<T, patientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientsAggregateArgs>(args: Subset<T, PatientsAggregateArgs>): Prisma.PrismaPromise<GetPatientsAggregateType<T>>

    /**
     * Group by Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends patientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: patientsGroupByArgs['orderBy'] }
        : { orderBy?: patientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, patientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the patients model
   */
  readonly fields: patientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for patients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__patientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    schedule<T extends patients$scheduleArgs<ExtArgs> = {}>(args?: Subset<T, patients$scheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the patients model
   */ 
  interface patientsFieldRefs {
    readonly id: FieldRef<"patients", 'Int'>
    readonly phone: FieldRef<"patients", 'String'>
    readonly name: FieldRef<"patients", 'String'>
    readonly email: FieldRef<"patients", 'String'>
    readonly gender: FieldRef<"patients", 'String'>
  }
    

  // Custom InputTypes
  /**
   * patients findUnique
   */
  export type patientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where: patientsWhereUniqueInput
  }

  /**
   * patients findUniqueOrThrow
   */
  export type patientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where: patientsWhereUniqueInput
  }

  /**
   * patients findFirst
   */
  export type patientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientsOrderByWithRelationInput | patientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * patients findFirstOrThrow
   */
  export type patientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientsOrderByWithRelationInput | patientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * patients findMany
   */
  export type patientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientsOrderByWithRelationInput | patientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patients.
     */
    cursor?: patientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    distinct?: PatientsScalarFieldEnum | PatientsScalarFieldEnum[]
  }

  /**
   * patients create
   */
  export type patientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * The data needed to create a patients.
     */
    data: XOR<patientsCreateInput, patientsUncheckedCreateInput>
  }

  /**
   * patients createMany
   */
  export type patientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many patients.
     */
    data: patientsCreateManyInput | patientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patients update
   */
  export type patientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * The data needed to update a patients.
     */
    data: XOR<patientsUpdateInput, patientsUncheckedUpdateInput>
    /**
     * Choose, which patients to update.
     */
    where: patientsWhereUniqueInput
  }

  /**
   * patients updateMany
   */
  export type patientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update patients.
     */
    data: XOR<patientsUpdateManyMutationInput, patientsUncheckedUpdateManyInput>
    /**
     * Filter which patients to update
     */
    where?: patientsWhereInput
  }

  /**
   * patients upsert
   */
  export type patientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * The filter to search for the patients to update in case it exists.
     */
    where: patientsWhereUniqueInput
    /**
     * In case the patients found by the `where` argument doesn't exist, create a new patients with this data.
     */
    create: XOR<patientsCreateInput, patientsUncheckedCreateInput>
    /**
     * In case the patients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patientsUpdateInput, patientsUncheckedUpdateInput>
  }

  /**
   * patients delete
   */
  export type patientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    /**
     * Filter which patients to delete.
     */
    where: patientsWhereUniqueInput
  }

  /**
   * patients deleteMany
   */
  export type patientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patients to delete
     */
    where?: patientsWhereInput
  }

  /**
   * patients.schedule
   */
  export type patients$scheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    where?: scheduleWhereInput
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    cursor?: scheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * patients without action
   */
  export type patientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
  }


  /**
   * Model schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    id: number | null
    doctor_id: number | null
    patient_id: number | null
    type: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    id: number | null
    doctor_id: number | null
    patient_id: number | null
    type: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: number | null
    doctor_id: number | null
    date: Date | null
    time_from: Date | null
    time_to: Date | null
    is_free: boolean | null
    patient_id: number | null
    type: number | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: number | null
    doctor_id: number | null
    date: Date | null
    time_from: Date | null
    time_to: Date | null
    is_free: boolean | null
    patient_id: number | null
    type: number | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    doctor_id: number
    date: number
    time_from: number
    time_to: number
    is_free: number
    patient_id: number
    type: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    id?: true
    doctor_id?: true
    patient_id?: true
    type?: true
  }

  export type ScheduleSumAggregateInputType = {
    id?: true
    doctor_id?: true
    patient_id?: true
    type?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    doctor_id?: true
    date?: true
    time_from?: true
    time_to?: true
    is_free?: true
    patient_id?: true
    type?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    doctor_id?: true
    date?: true
    time_from?: true
    time_to?: true
    is_free?: true
    patient_id?: true
    type?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    doctor_id?: true
    date?: true
    time_from?: true
    time_to?: true
    is_free?: true
    patient_id?: true
    type?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which schedule to aggregate.
     */
    where?: scheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schedules to fetch.
     */
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: scheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type scheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: scheduleWhereInput
    orderBy?: scheduleOrderByWithAggregationInput | scheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: scheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: number
    doctor_id: number
    date: Date
    time_from: Date
    time_to: Date
    is_free: boolean
    patient_id: number | null
    type: number | null
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends scheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type scheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctor_id?: boolean
    date?: boolean
    time_from?: boolean
    time_to?: boolean
    is_free?: boolean
    patient_id?: boolean
    type?: boolean
    doctors?: boolean | doctorsDefaultArgs<ExtArgs>
    patients?: boolean | schedule$patientsArgs<ExtArgs>
    tasks?: boolean | schedule$tasksArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>


  export type scheduleSelectScalar = {
    id?: boolean
    doctor_id?: boolean
    date?: boolean
    time_from?: boolean
    time_to?: boolean
    is_free?: boolean
    patient_id?: boolean
    type?: boolean
  }

  export type scheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctors?: boolean | doctorsDefaultArgs<ExtArgs>
    patients?: boolean | schedule$patientsArgs<ExtArgs>
    tasks?: boolean | schedule$tasksArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $schedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "schedule"
    objects: {
      doctors: Prisma.$doctorsPayload<ExtArgs>
      patients: Prisma.$patientsPayload<ExtArgs> | null
      tasks: Prisma.$tasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      doctor_id: number
      date: Date
      time_from: Date
      time_to: Date
      is_free: boolean
      patient_id: number | null
      type: number | null
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type scheduleGetPayload<S extends boolean | null | undefined | scheduleDefaultArgs> = $Result.GetResult<Prisma.$schedulePayload, S>

  type scheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<scheduleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface scheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['schedule'], meta: { name: 'schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {scheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends scheduleFindUniqueArgs>(args: SelectSubset<T, scheduleFindUniqueArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {scheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends scheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, scheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends scheduleFindFirstArgs>(args?: SelectSubset<T, scheduleFindFirstArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends scheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, scheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends scheduleFindManyArgs>(args?: SelectSubset<T, scheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Schedule.
     * @param {scheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends scheduleCreateArgs>(args: SelectSubset<T, scheduleCreateArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedules.
     * @param {scheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends scheduleCreateManyArgs>(args?: SelectSubset<T, scheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Schedule.
     * @param {scheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends scheduleDeleteArgs>(args: SelectSubset<T, scheduleDeleteArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Schedule.
     * @param {scheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends scheduleUpdateArgs>(args: SelectSubset<T, scheduleUpdateArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedules.
     * @param {scheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends scheduleDeleteManyArgs>(args?: SelectSubset<T, scheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends scheduleUpdateManyArgs>(args: SelectSubset<T, scheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Schedule.
     * @param {scheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends scheduleUpsertArgs>(args: SelectSubset<T, scheduleUpsertArgs<ExtArgs>>): Prisma__scheduleClient<$Result.GetResult<Prisma.$schedulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends scheduleCountArgs>(
      args?: Subset<T, scheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {scheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends scheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: scheduleGroupByArgs['orderBy'] }
        : { orderBy?: scheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, scheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the schedule model
   */
  readonly fields: scheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__scheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctors<T extends doctorsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, doctorsDefaultArgs<ExtArgs>>): Prisma__doctorsClient<$Result.GetResult<Prisma.$doctorsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patients<T extends schedule$patientsArgs<ExtArgs> = {}>(args?: Subset<T, schedule$patientsArgs<ExtArgs>>): Prisma__patientsClient<$Result.GetResult<Prisma.$patientsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tasks<T extends schedule$tasksArgs<ExtArgs> = {}>(args?: Subset<T, schedule$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the schedule model
   */ 
  interface scheduleFieldRefs {
    readonly id: FieldRef<"schedule", 'Int'>
    readonly doctor_id: FieldRef<"schedule", 'Int'>
    readonly date: FieldRef<"schedule", 'DateTime'>
    readonly time_from: FieldRef<"schedule", 'DateTime'>
    readonly time_to: FieldRef<"schedule", 'DateTime'>
    readonly is_free: FieldRef<"schedule", 'Boolean'>
    readonly patient_id: FieldRef<"schedule", 'Int'>
    readonly type: FieldRef<"schedule", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * schedule findUnique
   */
  export type scheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter, which schedule to fetch.
     */
    where: scheduleWhereUniqueInput
  }

  /**
   * schedule findUniqueOrThrow
   */
  export type scheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter, which schedule to fetch.
     */
    where: scheduleWhereUniqueInput
  }

  /**
   * schedule findFirst
   */
  export type scheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter, which schedule to fetch.
     */
    where?: scheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schedules to fetch.
     */
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for schedules.
     */
    cursor?: scheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * schedule findFirstOrThrow
   */
  export type scheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter, which schedule to fetch.
     */
    where?: scheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schedules to fetch.
     */
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for schedules.
     */
    cursor?: scheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * schedule findMany
   */
  export type scheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter, which schedules to fetch.
     */
    where?: scheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schedules to fetch.
     */
    orderBy?: scheduleOrderByWithRelationInput | scheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing schedules.
     */
    cursor?: scheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * schedule create
   */
  export type scheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a schedule.
     */
    data: XOR<scheduleCreateInput, scheduleUncheckedCreateInput>
  }

  /**
   * schedule createMany
   */
  export type scheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many schedules.
     */
    data: scheduleCreateManyInput | scheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * schedule update
   */
  export type scheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a schedule.
     */
    data: XOR<scheduleUpdateInput, scheduleUncheckedUpdateInput>
    /**
     * Choose, which schedule to update.
     */
    where: scheduleWhereUniqueInput
  }

  /**
   * schedule updateMany
   */
  export type scheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update schedules.
     */
    data: XOR<scheduleUpdateManyMutationInput, scheduleUncheckedUpdateManyInput>
    /**
     * Filter which schedules to update
     */
    where?: scheduleWhereInput
  }

  /**
   * schedule upsert
   */
  export type scheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the schedule to update in case it exists.
     */
    where: scheduleWhereUniqueInput
    /**
     * In case the schedule found by the `where` argument doesn't exist, create a new schedule with this data.
     */
    create: XOR<scheduleCreateInput, scheduleUncheckedCreateInput>
    /**
     * In case the schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<scheduleUpdateInput, scheduleUncheckedUpdateInput>
  }

  /**
   * schedule delete
   */
  export type scheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
    /**
     * Filter which schedule to delete.
     */
    where: scheduleWhereUniqueInput
  }

  /**
   * schedule deleteMany
   */
  export type scheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which schedules to delete
     */
    where?: scheduleWhereInput
  }

  /**
   * schedule.patients
   */
  export type schedule$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patients
     */
    select?: patientsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientsInclude<ExtArgs> | null
    where?: patientsWhereInput
  }

  /**
   * schedule.tasks
   */
  export type schedule$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * schedule without action
   */
  export type scheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the schedule
     */
    select?: scheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: scheduleInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TasksScalarFieldEnum: {
    Id: 'Id',
    count_calls: 'count_calls',
    number_phone: 'number_phone',
    status: 'status',
    info: 'info',
    schedule_id: 'schedule_id'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const CallsScalarFieldEnum: {
    Id_API: 'Id_API',
    task_id: 'task_id',
    phone: 'phone',
    status_id: 'status_id',
    info_result: 'info_result'
  };

  export type CallsScalarFieldEnum = (typeof CallsScalarFieldEnum)[keyof typeof CallsScalarFieldEnum]


  export const StatusesScalarFieldEnum: {
    statuse_id: 'statuse_id',
    name_statuse: 'name_statuse'
  };

  export type StatusesScalarFieldEnum = (typeof StatusesScalarFieldEnum)[keyof typeof StatusesScalarFieldEnum]


  export const DoctorsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    spec: 'spec',
    price: 'price'
  };

  export type DoctorsScalarFieldEnum = (typeof DoctorsScalarFieldEnum)[keyof typeof DoctorsScalarFieldEnum]


  export const PatientsScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    name: 'name',
    email: 'email',
    gender: 'gender'
  };

  export type PatientsScalarFieldEnum = (typeof PatientsScalarFieldEnum)[keyof typeof PatientsScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    doctor_id: 'doctor_id',
    date: 'date',
    time_from: 'time_from',
    time_to: 'time_to',
    is_free: 'is_free',
    patient_id: 'patient_id',
    type: 'type'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const tasksOrderByRelevanceFieldEnum: {
    number_phone: 'number_phone'
  };

  export type tasksOrderByRelevanceFieldEnum = (typeof tasksOrderByRelevanceFieldEnum)[keyof typeof tasksOrderByRelevanceFieldEnum]


  export const callsOrderByRelevanceFieldEnum: {
    phone: 'phone'
  };

  export type callsOrderByRelevanceFieldEnum = (typeof callsOrderByRelevanceFieldEnum)[keyof typeof callsOrderByRelevanceFieldEnum]


  export const statusesOrderByRelevanceFieldEnum: {
    name_statuse: 'name_statuse'
  };

  export type statusesOrderByRelevanceFieldEnum = (typeof statusesOrderByRelevanceFieldEnum)[keyof typeof statusesOrderByRelevanceFieldEnum]


  export const doctorsOrderByRelevanceFieldEnum: {
    name: 'name',
    spec: 'spec'
  };

  export type doctorsOrderByRelevanceFieldEnum = (typeof doctorsOrderByRelevanceFieldEnum)[keyof typeof doctorsOrderByRelevanceFieldEnum]


  export const patientsOrderByRelevanceFieldEnum: {
    phone: 'phone',
    name: 'name',
    email: 'email',
    gender: 'gender'
  };

  export type patientsOrderByRelevanceFieldEnum = (typeof patientsOrderByRelevanceFieldEnum)[keyof typeof patientsOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type tasksWhereInput = {
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    Id?: IntFilter<"tasks"> | number
    count_calls?: IntFilter<"tasks"> | number
    number_phone?: StringFilter<"tasks"> | string
    status?: IntFilter<"tasks"> | number
    info?: JsonNullableFilter<"tasks">
    schedule_id?: IntFilter<"tasks"> | number
    schedule?: XOR<ScheduleScalarRelationFilter, scheduleWhereInput>
    calls?: CallsListRelationFilter
  }

  export type tasksOrderByWithRelationInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    number_phone?: SortOrder
    status?: SortOrder
    info?: SortOrderInput | SortOrder
    schedule_id?: SortOrder
    schedule?: scheduleOrderByWithRelationInput
    calls?: callsOrderByRelationAggregateInput
    _relevance?: tasksOrderByRelevanceInput
  }

  export type tasksWhereUniqueInput = Prisma.AtLeast<{
    Id?: number
    status?: number
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    count_calls?: IntFilter<"tasks"> | number
    number_phone?: StringFilter<"tasks"> | string
    info?: JsonNullableFilter<"tasks">
    schedule_id?: IntFilter<"tasks"> | number
    schedule?: XOR<ScheduleScalarRelationFilter, scheduleWhereInput>
    calls?: CallsListRelationFilter
  }, "Id" | "status">

  export type tasksOrderByWithAggregationInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    number_phone?: SortOrder
    status?: SortOrder
    info?: SortOrderInput | SortOrder
    schedule_id?: SortOrder
    _count?: tasksCountOrderByAggregateInput
    _avg?: tasksAvgOrderByAggregateInput
    _max?: tasksMaxOrderByAggregateInput
    _min?: tasksMinOrderByAggregateInput
    _sum?: tasksSumOrderByAggregateInput
  }

  export type tasksScalarWhereWithAggregatesInput = {
    AND?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    OR?: tasksScalarWhereWithAggregatesInput[]
    NOT?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    Id?: IntWithAggregatesFilter<"tasks"> | number
    count_calls?: IntWithAggregatesFilter<"tasks"> | number
    number_phone?: StringWithAggregatesFilter<"tasks"> | string
    status?: IntWithAggregatesFilter<"tasks"> | number
    info?: JsonNullableWithAggregatesFilter<"tasks">
    schedule_id?: IntWithAggregatesFilter<"tasks"> | number
  }

  export type callsWhereInput = {
    AND?: callsWhereInput | callsWhereInput[]
    OR?: callsWhereInput[]
    NOT?: callsWhereInput | callsWhereInput[]
    Id_API?: IntFilter<"calls"> | number
    task_id?: IntFilter<"calls"> | number
    phone?: StringFilter<"calls"> | string
    status_id?: IntFilter<"calls"> | number
    info_result?: JsonNullableFilter<"calls">
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    statuses?: XOR<StatusesScalarRelationFilter, statusesWhereInput>
  }

  export type callsOrderByWithRelationInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    phone?: SortOrder
    status_id?: SortOrder
    info_result?: SortOrderInput | SortOrder
    tasks?: tasksOrderByWithRelationInput
    statuses?: statusesOrderByWithRelationInput
    _relevance?: callsOrderByRelevanceInput
  }

  export type callsWhereUniqueInput = Prisma.AtLeast<{
    Id_API?: number
    AND?: callsWhereInput | callsWhereInput[]
    OR?: callsWhereInput[]
    NOT?: callsWhereInput | callsWhereInput[]
    task_id?: IntFilter<"calls"> | number
    phone?: StringFilter<"calls"> | string
    status_id?: IntFilter<"calls"> | number
    info_result?: JsonNullableFilter<"calls">
    tasks?: XOR<TasksScalarRelationFilter, tasksWhereInput>
    statuses?: XOR<StatusesScalarRelationFilter, statusesWhereInput>
  }, "Id_API">

  export type callsOrderByWithAggregationInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    phone?: SortOrder
    status_id?: SortOrder
    info_result?: SortOrderInput | SortOrder
    _count?: callsCountOrderByAggregateInput
    _avg?: callsAvgOrderByAggregateInput
    _max?: callsMaxOrderByAggregateInput
    _min?: callsMinOrderByAggregateInput
    _sum?: callsSumOrderByAggregateInput
  }

  export type callsScalarWhereWithAggregatesInput = {
    AND?: callsScalarWhereWithAggregatesInput | callsScalarWhereWithAggregatesInput[]
    OR?: callsScalarWhereWithAggregatesInput[]
    NOT?: callsScalarWhereWithAggregatesInput | callsScalarWhereWithAggregatesInput[]
    Id_API?: IntWithAggregatesFilter<"calls"> | number
    task_id?: IntWithAggregatesFilter<"calls"> | number
    phone?: StringWithAggregatesFilter<"calls"> | string
    status_id?: IntWithAggregatesFilter<"calls"> | number
    info_result?: JsonNullableWithAggregatesFilter<"calls">
  }

  export type statusesWhereInput = {
    AND?: statusesWhereInput | statusesWhereInput[]
    OR?: statusesWhereInput[]
    NOT?: statusesWhereInput | statusesWhereInput[]
    statuse_id?: IntFilter<"statuses"> | number
    name_statuse?: StringFilter<"statuses"> | string
    calls?: CallsListRelationFilter
  }

  export type statusesOrderByWithRelationInput = {
    statuse_id?: SortOrder
    name_statuse?: SortOrder
    calls?: callsOrderByRelationAggregateInput
    _relevance?: statusesOrderByRelevanceInput
  }

  export type statusesWhereUniqueInput = Prisma.AtLeast<{
    statuse_id?: number
    AND?: statusesWhereInput | statusesWhereInput[]
    OR?: statusesWhereInput[]
    NOT?: statusesWhereInput | statusesWhereInput[]
    name_statuse?: StringFilter<"statuses"> | string
    calls?: CallsListRelationFilter
  }, "statuse_id">

  export type statusesOrderByWithAggregationInput = {
    statuse_id?: SortOrder
    name_statuse?: SortOrder
    _count?: statusesCountOrderByAggregateInput
    _avg?: statusesAvgOrderByAggregateInput
    _max?: statusesMaxOrderByAggregateInput
    _min?: statusesMinOrderByAggregateInput
    _sum?: statusesSumOrderByAggregateInput
  }

  export type statusesScalarWhereWithAggregatesInput = {
    AND?: statusesScalarWhereWithAggregatesInput | statusesScalarWhereWithAggregatesInput[]
    OR?: statusesScalarWhereWithAggregatesInput[]
    NOT?: statusesScalarWhereWithAggregatesInput | statusesScalarWhereWithAggregatesInput[]
    statuse_id?: IntWithAggregatesFilter<"statuses"> | number
    name_statuse?: StringWithAggregatesFilter<"statuses"> | string
  }

  export type doctorsWhereInput = {
    AND?: doctorsWhereInput | doctorsWhereInput[]
    OR?: doctorsWhereInput[]
    NOT?: doctorsWhereInput | doctorsWhereInput[]
    id?: IntFilter<"doctors"> | number
    name?: StringFilter<"doctors"> | string
    spec?: StringFilter<"doctors"> | string
    price?: IntFilter<"doctors"> | number
    schedule?: ScheduleListRelationFilter
  }

  export type doctorsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    spec?: SortOrder
    price?: SortOrder
    schedule?: scheduleOrderByRelationAggregateInput
    _relevance?: doctorsOrderByRelevanceInput
  }

  export type doctorsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: doctorsWhereInput | doctorsWhereInput[]
    OR?: doctorsWhereInput[]
    NOT?: doctorsWhereInput | doctorsWhereInput[]
    name?: StringFilter<"doctors"> | string
    spec?: StringFilter<"doctors"> | string
    price?: IntFilter<"doctors"> | number
    schedule?: ScheduleListRelationFilter
  }, "id">

  export type doctorsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    spec?: SortOrder
    price?: SortOrder
    _count?: doctorsCountOrderByAggregateInput
    _avg?: doctorsAvgOrderByAggregateInput
    _max?: doctorsMaxOrderByAggregateInput
    _min?: doctorsMinOrderByAggregateInput
    _sum?: doctorsSumOrderByAggregateInput
  }

  export type doctorsScalarWhereWithAggregatesInput = {
    AND?: doctorsScalarWhereWithAggregatesInput | doctorsScalarWhereWithAggregatesInput[]
    OR?: doctorsScalarWhereWithAggregatesInput[]
    NOT?: doctorsScalarWhereWithAggregatesInput | doctorsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"doctors"> | number
    name?: StringWithAggregatesFilter<"doctors"> | string
    spec?: StringWithAggregatesFilter<"doctors"> | string
    price?: IntWithAggregatesFilter<"doctors"> | number
  }

  export type patientsWhereInput = {
    AND?: patientsWhereInput | patientsWhereInput[]
    OR?: patientsWhereInput[]
    NOT?: patientsWhereInput | patientsWhereInput[]
    id?: IntFilter<"patients"> | number
    phone?: StringFilter<"patients"> | string
    name?: StringFilter<"patients"> | string
    email?: StringFilter<"patients"> | string
    gender?: StringFilter<"patients"> | string
    schedule?: ScheduleListRelationFilter
  }

  export type patientsOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    schedule?: scheduleOrderByRelationAggregateInput
    _relevance?: patientsOrderByRelevanceInput
  }

  export type patientsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: patientsWhereInput | patientsWhereInput[]
    OR?: patientsWhereInput[]
    NOT?: patientsWhereInput | patientsWhereInput[]
    phone?: StringFilter<"patients"> | string
    name?: StringFilter<"patients"> | string
    email?: StringFilter<"patients"> | string
    gender?: StringFilter<"patients"> | string
    schedule?: ScheduleListRelationFilter
  }, "id">

  export type patientsOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    _count?: patientsCountOrderByAggregateInput
    _avg?: patientsAvgOrderByAggregateInput
    _max?: patientsMaxOrderByAggregateInput
    _min?: patientsMinOrderByAggregateInput
    _sum?: patientsSumOrderByAggregateInput
  }

  export type patientsScalarWhereWithAggregatesInput = {
    AND?: patientsScalarWhereWithAggregatesInput | patientsScalarWhereWithAggregatesInput[]
    OR?: patientsScalarWhereWithAggregatesInput[]
    NOT?: patientsScalarWhereWithAggregatesInput | patientsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"patients"> | number
    phone?: StringWithAggregatesFilter<"patients"> | string
    name?: StringWithAggregatesFilter<"patients"> | string
    email?: StringWithAggregatesFilter<"patients"> | string
    gender?: StringWithAggregatesFilter<"patients"> | string
  }

  export type scheduleWhereInput = {
    AND?: scheduleWhereInput | scheduleWhereInput[]
    OR?: scheduleWhereInput[]
    NOT?: scheduleWhereInput | scheduleWhereInput[]
    id?: IntFilter<"schedule"> | number
    doctor_id?: IntFilter<"schedule"> | number
    date?: DateTimeFilter<"schedule"> | Date | string
    time_from?: DateTimeFilter<"schedule"> | Date | string
    time_to?: DateTimeFilter<"schedule"> | Date | string
    is_free?: BoolFilter<"schedule"> | boolean
    patient_id?: IntNullableFilter<"schedule"> | number | null
    type?: IntNullableFilter<"schedule"> | number | null
    doctors?: XOR<DoctorsScalarRelationFilter, doctorsWhereInput>
    patients?: XOR<PatientsNullableScalarRelationFilter, patientsWhereInput> | null
    tasks?: TasksListRelationFilter
  }

  export type scheduleOrderByWithRelationInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    date?: SortOrder
    time_from?: SortOrder
    time_to?: SortOrder
    is_free?: SortOrder
    patient_id?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    doctors?: doctorsOrderByWithRelationInput
    patients?: patientsOrderByWithRelationInput
    tasks?: tasksOrderByRelationAggregateInput
  }

  export type scheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: scheduleWhereInput | scheduleWhereInput[]
    OR?: scheduleWhereInput[]
    NOT?: scheduleWhereInput | scheduleWhereInput[]
    doctor_id?: IntFilter<"schedule"> | number
    date?: DateTimeFilter<"schedule"> | Date | string
    time_from?: DateTimeFilter<"schedule"> | Date | string
    time_to?: DateTimeFilter<"schedule"> | Date | string
    is_free?: BoolFilter<"schedule"> | boolean
    patient_id?: IntNullableFilter<"schedule"> | number | null
    type?: IntNullableFilter<"schedule"> | number | null
    doctors?: XOR<DoctorsScalarRelationFilter, doctorsWhereInput>
    patients?: XOR<PatientsNullableScalarRelationFilter, patientsWhereInput> | null
    tasks?: TasksListRelationFilter
  }, "id" | "id">

  export type scheduleOrderByWithAggregationInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    date?: SortOrder
    time_from?: SortOrder
    time_to?: SortOrder
    is_free?: SortOrder
    patient_id?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    _count?: scheduleCountOrderByAggregateInput
    _avg?: scheduleAvgOrderByAggregateInput
    _max?: scheduleMaxOrderByAggregateInput
    _min?: scheduleMinOrderByAggregateInput
    _sum?: scheduleSumOrderByAggregateInput
  }

  export type scheduleScalarWhereWithAggregatesInput = {
    AND?: scheduleScalarWhereWithAggregatesInput | scheduleScalarWhereWithAggregatesInput[]
    OR?: scheduleScalarWhereWithAggregatesInput[]
    NOT?: scheduleScalarWhereWithAggregatesInput | scheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"schedule"> | number
    doctor_id?: IntWithAggregatesFilter<"schedule"> | number
    date?: DateTimeWithAggregatesFilter<"schedule"> | Date | string
    time_from?: DateTimeWithAggregatesFilter<"schedule"> | Date | string
    time_to?: DateTimeWithAggregatesFilter<"schedule"> | Date | string
    is_free?: BoolWithAggregatesFilter<"schedule"> | boolean
    patient_id?: IntNullableWithAggregatesFilter<"schedule"> | number | null
    type?: IntNullableWithAggregatesFilter<"schedule"> | number | null
  }

  export type tasksCreateInput = {
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule: scheduleCreateNestedOneWithoutTasksInput
    calls?: callsCreateNestedManyWithoutTasksInput
  }

  export type tasksUncheckedCreateInput = {
    Id?: number
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id: number
    calls?: callsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksUpdateInput = {
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule?: scheduleUpdateOneRequiredWithoutTasksNestedInput
    calls?: callsUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id?: IntFieldUpdateOperationsInput | number
    calls?: callsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksCreateManyInput = {
    Id?: number
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id: number
  }

  export type tasksUpdateManyMutationInput = {
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type tasksUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id?: IntFieldUpdateOperationsInput | number
  }

  export type callsCreateInput = {
    Id_API: number
    phone: string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    tasks: tasksCreateNestedOneWithoutCallsInput
    statuses: statusesCreateNestedOneWithoutCallsInput
  }

  export type callsUncheckedCreateInput = {
    Id_API: number
    task_id: number
    phone: string
    status_id: number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUpdateInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    tasks?: tasksUpdateOneRequiredWithoutCallsNestedInput
    statuses?: statusesUpdateOneRequiredWithoutCallsNestedInput
  }

  export type callsUncheckedUpdateInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    status_id?: IntFieldUpdateOperationsInput | number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsCreateManyInput = {
    Id_API: number
    task_id: number
    phone: string
    status_id: number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUpdateManyMutationInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUncheckedUpdateManyInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    status_id?: IntFieldUpdateOperationsInput | number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type statusesCreateInput = {
    name_statuse: string
    calls?: callsCreateNestedManyWithoutStatusesInput
  }

  export type statusesUncheckedCreateInput = {
    statuse_id?: number
    name_statuse: string
    calls?: callsUncheckedCreateNestedManyWithoutStatusesInput
  }

  export type statusesUpdateInput = {
    name_statuse?: StringFieldUpdateOperationsInput | string
    calls?: callsUpdateManyWithoutStatusesNestedInput
  }

  export type statusesUncheckedUpdateInput = {
    statuse_id?: IntFieldUpdateOperationsInput | number
    name_statuse?: StringFieldUpdateOperationsInput | string
    calls?: callsUncheckedUpdateManyWithoutStatusesNestedInput
  }

  export type statusesCreateManyInput = {
    statuse_id?: number
    name_statuse: string
  }

  export type statusesUpdateManyMutationInput = {
    name_statuse?: StringFieldUpdateOperationsInput | string
  }

  export type statusesUncheckedUpdateManyInput = {
    statuse_id?: IntFieldUpdateOperationsInput | number
    name_statuse?: StringFieldUpdateOperationsInput | string
  }

  export type doctorsCreateInput = {
    name: string
    spec: string
    price: number
    schedule?: scheduleCreateNestedManyWithoutDoctorsInput
  }

  export type doctorsUncheckedCreateInput = {
    id?: number
    name: string
    spec: string
    price: number
    schedule?: scheduleUncheckedCreateNestedManyWithoutDoctorsInput
  }

  export type doctorsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    schedule?: scheduleUpdateManyWithoutDoctorsNestedInput
  }

  export type doctorsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    schedule?: scheduleUncheckedUpdateManyWithoutDoctorsNestedInput
  }

  export type doctorsCreateManyInput = {
    id?: number
    name: string
    spec: string
    price: number
  }

  export type doctorsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type doctorsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type patientsCreateInput = {
    phone: string
    name: string
    email: string
    gender: string
    schedule?: scheduleCreateNestedManyWithoutPatientsInput
  }

  export type patientsUncheckedCreateInput = {
    id?: number
    phone: string
    name: string
    email: string
    gender: string
    schedule?: scheduleUncheckedCreateNestedManyWithoutPatientsInput
  }

  export type patientsUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    schedule?: scheduleUpdateManyWithoutPatientsNestedInput
  }

  export type patientsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    schedule?: scheduleUncheckedUpdateManyWithoutPatientsNestedInput
  }

  export type patientsCreateManyInput = {
    id?: number
    phone: string
    name: string
    email: string
    gender: string
  }

  export type patientsUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type patientsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type scheduleCreateInput = {
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
    doctors: doctorsCreateNestedOneWithoutScheduleInput
    patients?: patientsCreateNestedOneWithoutScheduleInput
    tasks?: tasksCreateNestedManyWithoutScheduleInput
  }

  export type scheduleUncheckedCreateInput = {
    id?: number
    doctor_id: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    patient_id?: number | null
    type?: number | null
    tasks?: tasksUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type scheduleUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
    doctors?: doctorsUpdateOneRequiredWithoutScheduleNestedInput
    patients?: patientsUpdateOneWithoutScheduleNestedInput
    tasks?: tasksUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctor_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    patient_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleCreateManyInput = {
    id?: number
    doctor_id: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    patient_id?: number | null
    type?: number | null
  }

  export type scheduleUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type scheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctor_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    patient_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ScheduleScalarRelationFilter = {
    is?: scheduleWhereInput
    isNot?: scheduleWhereInput
  }

  export type CallsListRelationFilter = {
    every?: callsWhereInput
    some?: callsWhereInput
    none?: callsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type callsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tasksOrderByRelevanceInput = {
    fields: tasksOrderByRelevanceFieldEnum | tasksOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type tasksCountOrderByAggregateInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    number_phone?: SortOrder
    status?: SortOrder
    info?: SortOrder
    schedule_id?: SortOrder
  }

  export type tasksAvgOrderByAggregateInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    status?: SortOrder
    schedule_id?: SortOrder
  }

  export type tasksMaxOrderByAggregateInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    number_phone?: SortOrder
    status?: SortOrder
    schedule_id?: SortOrder
  }

  export type tasksMinOrderByAggregateInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    number_phone?: SortOrder
    status?: SortOrder
    schedule_id?: SortOrder
  }

  export type tasksSumOrderByAggregateInput = {
    Id?: SortOrder
    count_calls?: SortOrder
    status?: SortOrder
    schedule_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type TasksScalarRelationFilter = {
    is?: tasksWhereInput
    isNot?: tasksWhereInput
  }

  export type StatusesScalarRelationFilter = {
    is?: statusesWhereInput
    isNot?: statusesWhereInput
  }

  export type callsOrderByRelevanceInput = {
    fields: callsOrderByRelevanceFieldEnum | callsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type callsCountOrderByAggregateInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    phone?: SortOrder
    status_id?: SortOrder
    info_result?: SortOrder
  }

  export type callsAvgOrderByAggregateInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    status_id?: SortOrder
  }

  export type callsMaxOrderByAggregateInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    phone?: SortOrder
    status_id?: SortOrder
  }

  export type callsMinOrderByAggregateInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    phone?: SortOrder
    status_id?: SortOrder
  }

  export type callsSumOrderByAggregateInput = {
    Id_API?: SortOrder
    task_id?: SortOrder
    status_id?: SortOrder
  }

  export type statusesOrderByRelevanceInput = {
    fields: statusesOrderByRelevanceFieldEnum | statusesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type statusesCountOrderByAggregateInput = {
    statuse_id?: SortOrder
    name_statuse?: SortOrder
  }

  export type statusesAvgOrderByAggregateInput = {
    statuse_id?: SortOrder
  }

  export type statusesMaxOrderByAggregateInput = {
    statuse_id?: SortOrder
    name_statuse?: SortOrder
  }

  export type statusesMinOrderByAggregateInput = {
    statuse_id?: SortOrder
    name_statuse?: SortOrder
  }

  export type statusesSumOrderByAggregateInput = {
    statuse_id?: SortOrder
  }

  export type ScheduleListRelationFilter = {
    every?: scheduleWhereInput
    some?: scheduleWhereInput
    none?: scheduleWhereInput
  }

  export type scheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type doctorsOrderByRelevanceInput = {
    fields: doctorsOrderByRelevanceFieldEnum | doctorsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type doctorsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spec?: SortOrder
    price?: SortOrder
  }

  export type doctorsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type doctorsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spec?: SortOrder
    price?: SortOrder
  }

  export type doctorsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    spec?: SortOrder
    price?: SortOrder
  }

  export type doctorsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type patientsOrderByRelevanceInput = {
    fields: patientsOrderByRelevanceFieldEnum | patientsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type patientsCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type patientsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type patientsMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type patientsMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    gender?: SortOrder
  }

  export type patientsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DoctorsScalarRelationFilter = {
    is?: doctorsWhereInput
    isNot?: doctorsWhereInput
  }

  export type PatientsNullableScalarRelationFilter = {
    is?: patientsWhereInput | null
    isNot?: patientsWhereInput | null
  }

  export type TasksListRelationFilter = {
    every?: tasksWhereInput
    some?: tasksWhereInput
    none?: tasksWhereInput
  }

  export type tasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type scheduleCountOrderByAggregateInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    date?: SortOrder
    time_from?: SortOrder
    time_to?: SortOrder
    is_free?: SortOrder
    patient_id?: SortOrder
    type?: SortOrder
  }

  export type scheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    patient_id?: SortOrder
    type?: SortOrder
  }

  export type scheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    date?: SortOrder
    time_from?: SortOrder
    time_to?: SortOrder
    is_free?: SortOrder
    patient_id?: SortOrder
    type?: SortOrder
  }

  export type scheduleMinOrderByAggregateInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    date?: SortOrder
    time_from?: SortOrder
    time_to?: SortOrder
    is_free?: SortOrder
    patient_id?: SortOrder
    type?: SortOrder
  }

  export type scheduleSumOrderByAggregateInput = {
    id?: SortOrder
    doctor_id?: SortOrder
    patient_id?: SortOrder
    type?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type scheduleCreateNestedOneWithoutTasksInput = {
    create?: XOR<scheduleCreateWithoutTasksInput, scheduleUncheckedCreateWithoutTasksInput>
    connectOrCreate?: scheduleCreateOrConnectWithoutTasksInput
    connect?: scheduleWhereUniqueInput
  }

  export type callsCreateNestedManyWithoutTasksInput = {
    create?: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput> | callsCreateWithoutTasksInput[] | callsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: callsCreateOrConnectWithoutTasksInput | callsCreateOrConnectWithoutTasksInput[]
    createMany?: callsCreateManyTasksInputEnvelope
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
  }

  export type callsUncheckedCreateNestedManyWithoutTasksInput = {
    create?: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput> | callsCreateWithoutTasksInput[] | callsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: callsCreateOrConnectWithoutTasksInput | callsCreateOrConnectWithoutTasksInput[]
    createMany?: callsCreateManyTasksInputEnvelope
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type scheduleUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<scheduleCreateWithoutTasksInput, scheduleUncheckedCreateWithoutTasksInput>
    connectOrCreate?: scheduleCreateOrConnectWithoutTasksInput
    upsert?: scheduleUpsertWithoutTasksInput
    connect?: scheduleWhereUniqueInput
    update?: XOR<XOR<scheduleUpdateToOneWithWhereWithoutTasksInput, scheduleUpdateWithoutTasksInput>, scheduleUncheckedUpdateWithoutTasksInput>
  }

  export type callsUpdateManyWithoutTasksNestedInput = {
    create?: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput> | callsCreateWithoutTasksInput[] | callsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: callsCreateOrConnectWithoutTasksInput | callsCreateOrConnectWithoutTasksInput[]
    upsert?: callsUpsertWithWhereUniqueWithoutTasksInput | callsUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: callsCreateManyTasksInputEnvelope
    set?: callsWhereUniqueInput | callsWhereUniqueInput[]
    disconnect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    delete?: callsWhereUniqueInput | callsWhereUniqueInput[]
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    update?: callsUpdateWithWhereUniqueWithoutTasksInput | callsUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: callsUpdateManyWithWhereWithoutTasksInput | callsUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: callsScalarWhereInput | callsScalarWhereInput[]
  }

  export type callsUncheckedUpdateManyWithoutTasksNestedInput = {
    create?: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput> | callsCreateWithoutTasksInput[] | callsUncheckedCreateWithoutTasksInput[]
    connectOrCreate?: callsCreateOrConnectWithoutTasksInput | callsCreateOrConnectWithoutTasksInput[]
    upsert?: callsUpsertWithWhereUniqueWithoutTasksInput | callsUpsertWithWhereUniqueWithoutTasksInput[]
    createMany?: callsCreateManyTasksInputEnvelope
    set?: callsWhereUniqueInput | callsWhereUniqueInput[]
    disconnect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    delete?: callsWhereUniqueInput | callsWhereUniqueInput[]
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    update?: callsUpdateWithWhereUniqueWithoutTasksInput | callsUpdateWithWhereUniqueWithoutTasksInput[]
    updateMany?: callsUpdateManyWithWhereWithoutTasksInput | callsUpdateManyWithWhereWithoutTasksInput[]
    deleteMany?: callsScalarWhereInput | callsScalarWhereInput[]
  }

  export type tasksCreateNestedOneWithoutCallsInput = {
    create?: XOR<tasksCreateWithoutCallsInput, tasksUncheckedCreateWithoutCallsInput>
    connectOrCreate?: tasksCreateOrConnectWithoutCallsInput
    connect?: tasksWhereUniqueInput
  }

  export type statusesCreateNestedOneWithoutCallsInput = {
    create?: XOR<statusesCreateWithoutCallsInput, statusesUncheckedCreateWithoutCallsInput>
    connectOrCreate?: statusesCreateOrConnectWithoutCallsInput
    connect?: statusesWhereUniqueInput
  }

  export type tasksUpdateOneRequiredWithoutCallsNestedInput = {
    create?: XOR<tasksCreateWithoutCallsInput, tasksUncheckedCreateWithoutCallsInput>
    connectOrCreate?: tasksCreateOrConnectWithoutCallsInput
    upsert?: tasksUpsertWithoutCallsInput
    connect?: tasksWhereUniqueInput
    update?: XOR<XOR<tasksUpdateToOneWithWhereWithoutCallsInput, tasksUpdateWithoutCallsInput>, tasksUncheckedUpdateWithoutCallsInput>
  }

  export type statusesUpdateOneRequiredWithoutCallsNestedInput = {
    create?: XOR<statusesCreateWithoutCallsInput, statusesUncheckedCreateWithoutCallsInput>
    connectOrCreate?: statusesCreateOrConnectWithoutCallsInput
    upsert?: statusesUpsertWithoutCallsInput
    connect?: statusesWhereUniqueInput
    update?: XOR<XOR<statusesUpdateToOneWithWhereWithoutCallsInput, statusesUpdateWithoutCallsInput>, statusesUncheckedUpdateWithoutCallsInput>
  }

  export type callsCreateNestedManyWithoutStatusesInput = {
    create?: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput> | callsCreateWithoutStatusesInput[] | callsUncheckedCreateWithoutStatusesInput[]
    connectOrCreate?: callsCreateOrConnectWithoutStatusesInput | callsCreateOrConnectWithoutStatusesInput[]
    createMany?: callsCreateManyStatusesInputEnvelope
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
  }

  export type callsUncheckedCreateNestedManyWithoutStatusesInput = {
    create?: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput> | callsCreateWithoutStatusesInput[] | callsUncheckedCreateWithoutStatusesInput[]
    connectOrCreate?: callsCreateOrConnectWithoutStatusesInput | callsCreateOrConnectWithoutStatusesInput[]
    createMany?: callsCreateManyStatusesInputEnvelope
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
  }

  export type callsUpdateManyWithoutStatusesNestedInput = {
    create?: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput> | callsCreateWithoutStatusesInput[] | callsUncheckedCreateWithoutStatusesInput[]
    connectOrCreate?: callsCreateOrConnectWithoutStatusesInput | callsCreateOrConnectWithoutStatusesInput[]
    upsert?: callsUpsertWithWhereUniqueWithoutStatusesInput | callsUpsertWithWhereUniqueWithoutStatusesInput[]
    createMany?: callsCreateManyStatusesInputEnvelope
    set?: callsWhereUniqueInput | callsWhereUniqueInput[]
    disconnect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    delete?: callsWhereUniqueInput | callsWhereUniqueInput[]
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    update?: callsUpdateWithWhereUniqueWithoutStatusesInput | callsUpdateWithWhereUniqueWithoutStatusesInput[]
    updateMany?: callsUpdateManyWithWhereWithoutStatusesInput | callsUpdateManyWithWhereWithoutStatusesInput[]
    deleteMany?: callsScalarWhereInput | callsScalarWhereInput[]
  }

  export type callsUncheckedUpdateManyWithoutStatusesNestedInput = {
    create?: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput> | callsCreateWithoutStatusesInput[] | callsUncheckedCreateWithoutStatusesInput[]
    connectOrCreate?: callsCreateOrConnectWithoutStatusesInput | callsCreateOrConnectWithoutStatusesInput[]
    upsert?: callsUpsertWithWhereUniqueWithoutStatusesInput | callsUpsertWithWhereUniqueWithoutStatusesInput[]
    createMany?: callsCreateManyStatusesInputEnvelope
    set?: callsWhereUniqueInput | callsWhereUniqueInput[]
    disconnect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    delete?: callsWhereUniqueInput | callsWhereUniqueInput[]
    connect?: callsWhereUniqueInput | callsWhereUniqueInput[]
    update?: callsUpdateWithWhereUniqueWithoutStatusesInput | callsUpdateWithWhereUniqueWithoutStatusesInput[]
    updateMany?: callsUpdateManyWithWhereWithoutStatusesInput | callsUpdateManyWithWhereWithoutStatusesInput[]
    deleteMany?: callsScalarWhereInput | callsScalarWhereInput[]
  }

  export type scheduleCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput> | scheduleCreateWithoutDoctorsInput[] | scheduleUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutDoctorsInput | scheduleCreateOrConnectWithoutDoctorsInput[]
    createMany?: scheduleCreateManyDoctorsInputEnvelope
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
  }

  export type scheduleUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput> | scheduleCreateWithoutDoctorsInput[] | scheduleUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutDoctorsInput | scheduleCreateOrConnectWithoutDoctorsInput[]
    createMany?: scheduleCreateManyDoctorsInputEnvelope
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
  }

  export type scheduleUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput> | scheduleCreateWithoutDoctorsInput[] | scheduleUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutDoctorsInput | scheduleCreateOrConnectWithoutDoctorsInput[]
    upsert?: scheduleUpsertWithWhereUniqueWithoutDoctorsInput | scheduleUpsertWithWhereUniqueWithoutDoctorsInput[]
    createMany?: scheduleCreateManyDoctorsInputEnvelope
    set?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    disconnect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    delete?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    update?: scheduleUpdateWithWhereUniqueWithoutDoctorsInput | scheduleUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: scheduleUpdateManyWithWhereWithoutDoctorsInput | scheduleUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
  }

  export type scheduleUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput> | scheduleCreateWithoutDoctorsInput[] | scheduleUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutDoctorsInput | scheduleCreateOrConnectWithoutDoctorsInput[]
    upsert?: scheduleUpsertWithWhereUniqueWithoutDoctorsInput | scheduleUpsertWithWhereUniqueWithoutDoctorsInput[]
    createMany?: scheduleCreateManyDoctorsInputEnvelope
    set?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    disconnect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    delete?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    update?: scheduleUpdateWithWhereUniqueWithoutDoctorsInput | scheduleUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: scheduleUpdateManyWithWhereWithoutDoctorsInput | scheduleUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
  }

  export type scheduleCreateNestedManyWithoutPatientsInput = {
    create?: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput> | scheduleCreateWithoutPatientsInput[] | scheduleUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutPatientsInput | scheduleCreateOrConnectWithoutPatientsInput[]
    createMany?: scheduleCreateManyPatientsInputEnvelope
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
  }

  export type scheduleUncheckedCreateNestedManyWithoutPatientsInput = {
    create?: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput> | scheduleCreateWithoutPatientsInput[] | scheduleUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutPatientsInput | scheduleCreateOrConnectWithoutPatientsInput[]
    createMany?: scheduleCreateManyPatientsInputEnvelope
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
  }

  export type scheduleUpdateManyWithoutPatientsNestedInput = {
    create?: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput> | scheduleCreateWithoutPatientsInput[] | scheduleUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutPatientsInput | scheduleCreateOrConnectWithoutPatientsInput[]
    upsert?: scheduleUpsertWithWhereUniqueWithoutPatientsInput | scheduleUpsertWithWhereUniqueWithoutPatientsInput[]
    createMany?: scheduleCreateManyPatientsInputEnvelope
    set?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    disconnect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    delete?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    update?: scheduleUpdateWithWhereUniqueWithoutPatientsInput | scheduleUpdateWithWhereUniqueWithoutPatientsInput[]
    updateMany?: scheduleUpdateManyWithWhereWithoutPatientsInput | scheduleUpdateManyWithWhereWithoutPatientsInput[]
    deleteMany?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
  }

  export type scheduleUncheckedUpdateManyWithoutPatientsNestedInput = {
    create?: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput> | scheduleCreateWithoutPatientsInput[] | scheduleUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: scheduleCreateOrConnectWithoutPatientsInput | scheduleCreateOrConnectWithoutPatientsInput[]
    upsert?: scheduleUpsertWithWhereUniqueWithoutPatientsInput | scheduleUpsertWithWhereUniqueWithoutPatientsInput[]
    createMany?: scheduleCreateManyPatientsInputEnvelope
    set?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    disconnect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    delete?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    connect?: scheduleWhereUniqueInput | scheduleWhereUniqueInput[]
    update?: scheduleUpdateWithWhereUniqueWithoutPatientsInput | scheduleUpdateWithWhereUniqueWithoutPatientsInput[]
    updateMany?: scheduleUpdateManyWithWhereWithoutPatientsInput | scheduleUpdateManyWithWhereWithoutPatientsInput[]
    deleteMany?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
  }

  export type doctorsCreateNestedOneWithoutScheduleInput = {
    create?: XOR<doctorsCreateWithoutScheduleInput, doctorsUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: doctorsCreateOrConnectWithoutScheduleInput
    connect?: doctorsWhereUniqueInput
  }

  export type patientsCreateNestedOneWithoutScheduleInput = {
    create?: XOR<patientsCreateWithoutScheduleInput, patientsUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: patientsCreateOrConnectWithoutScheduleInput
    connect?: patientsWhereUniqueInput
  }

  export type tasksCreateNestedManyWithoutScheduleInput = {
    create?: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput> | tasksCreateWithoutScheduleInput[] | tasksUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutScheduleInput | tasksCreateOrConnectWithoutScheduleInput[]
    createMany?: tasksCreateManyScheduleInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput> | tasksCreateWithoutScheduleInput[] | tasksUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutScheduleInput | tasksCreateOrConnectWithoutScheduleInput[]
    createMany?: tasksCreateManyScheduleInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type doctorsUpdateOneRequiredWithoutScheduleNestedInput = {
    create?: XOR<doctorsCreateWithoutScheduleInput, doctorsUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: doctorsCreateOrConnectWithoutScheduleInput
    upsert?: doctorsUpsertWithoutScheduleInput
    connect?: doctorsWhereUniqueInput
    update?: XOR<XOR<doctorsUpdateToOneWithWhereWithoutScheduleInput, doctorsUpdateWithoutScheduleInput>, doctorsUncheckedUpdateWithoutScheduleInput>
  }

  export type patientsUpdateOneWithoutScheduleNestedInput = {
    create?: XOR<patientsCreateWithoutScheduleInput, patientsUncheckedCreateWithoutScheduleInput>
    connectOrCreate?: patientsCreateOrConnectWithoutScheduleInput
    upsert?: patientsUpsertWithoutScheduleInput
    disconnect?: patientsWhereInput | boolean
    delete?: patientsWhereInput | boolean
    connect?: patientsWhereUniqueInput
    update?: XOR<XOR<patientsUpdateToOneWithWhereWithoutScheduleInput, patientsUpdateWithoutScheduleInput>, patientsUncheckedUpdateWithoutScheduleInput>
  }

  export type tasksUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput> | tasksCreateWithoutScheduleInput[] | tasksUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutScheduleInput | tasksCreateOrConnectWithoutScheduleInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutScheduleInput | tasksUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: tasksCreateManyScheduleInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutScheduleInput | tasksUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutScheduleInput | tasksUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput> | tasksCreateWithoutScheduleInput[] | tasksUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutScheduleInput | tasksCreateOrConnectWithoutScheduleInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutScheduleInput | tasksUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: tasksCreateManyScheduleInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutScheduleInput | tasksUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutScheduleInput | tasksUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type scheduleCreateWithoutTasksInput = {
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
    doctors: doctorsCreateNestedOneWithoutScheduleInput
    patients?: patientsCreateNestedOneWithoutScheduleInput
  }

  export type scheduleUncheckedCreateWithoutTasksInput = {
    id?: number
    doctor_id: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    patient_id?: number | null
    type?: number | null
  }

  export type scheduleCreateOrConnectWithoutTasksInput = {
    where: scheduleWhereUniqueInput
    create: XOR<scheduleCreateWithoutTasksInput, scheduleUncheckedCreateWithoutTasksInput>
  }

  export type callsCreateWithoutTasksInput = {
    Id_API: number
    phone: string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    statuses: statusesCreateNestedOneWithoutCallsInput
  }

  export type callsUncheckedCreateWithoutTasksInput = {
    Id_API: number
    phone: string
    status_id: number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsCreateOrConnectWithoutTasksInput = {
    where: callsWhereUniqueInput
    create: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput>
  }

  export type callsCreateManyTasksInputEnvelope = {
    data: callsCreateManyTasksInput | callsCreateManyTasksInput[]
    skipDuplicates?: boolean
  }

  export type scheduleUpsertWithoutTasksInput = {
    update: XOR<scheduleUpdateWithoutTasksInput, scheduleUncheckedUpdateWithoutTasksInput>
    create: XOR<scheduleCreateWithoutTasksInput, scheduleUncheckedCreateWithoutTasksInput>
    where?: scheduleWhereInput
  }

  export type scheduleUpdateToOneWithWhereWithoutTasksInput = {
    where?: scheduleWhereInput
    data: XOR<scheduleUpdateWithoutTasksInput, scheduleUncheckedUpdateWithoutTasksInput>
  }

  export type scheduleUpdateWithoutTasksInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
    doctors?: doctorsUpdateOneRequiredWithoutScheduleNestedInput
    patients?: patientsUpdateOneWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctor_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    patient_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type callsUpsertWithWhereUniqueWithoutTasksInput = {
    where: callsWhereUniqueInput
    update: XOR<callsUpdateWithoutTasksInput, callsUncheckedUpdateWithoutTasksInput>
    create: XOR<callsCreateWithoutTasksInput, callsUncheckedCreateWithoutTasksInput>
  }

  export type callsUpdateWithWhereUniqueWithoutTasksInput = {
    where: callsWhereUniqueInput
    data: XOR<callsUpdateWithoutTasksInput, callsUncheckedUpdateWithoutTasksInput>
  }

  export type callsUpdateManyWithWhereWithoutTasksInput = {
    where: callsScalarWhereInput
    data: XOR<callsUpdateManyMutationInput, callsUncheckedUpdateManyWithoutTasksInput>
  }

  export type callsScalarWhereInput = {
    AND?: callsScalarWhereInput | callsScalarWhereInput[]
    OR?: callsScalarWhereInput[]
    NOT?: callsScalarWhereInput | callsScalarWhereInput[]
    Id_API?: IntFilter<"calls"> | number
    task_id?: IntFilter<"calls"> | number
    phone?: StringFilter<"calls"> | string
    status_id?: IntFilter<"calls"> | number
    info_result?: JsonNullableFilter<"calls">
  }

  export type tasksCreateWithoutCallsInput = {
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule: scheduleCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutCallsInput = {
    Id?: number
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id: number
  }

  export type tasksCreateOrConnectWithoutCallsInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutCallsInput, tasksUncheckedCreateWithoutCallsInput>
  }

  export type statusesCreateWithoutCallsInput = {
    name_statuse: string
  }

  export type statusesUncheckedCreateWithoutCallsInput = {
    statuse_id?: number
    name_statuse: string
  }

  export type statusesCreateOrConnectWithoutCallsInput = {
    where: statusesWhereUniqueInput
    create: XOR<statusesCreateWithoutCallsInput, statusesUncheckedCreateWithoutCallsInput>
  }

  export type tasksUpsertWithoutCallsInput = {
    update: XOR<tasksUpdateWithoutCallsInput, tasksUncheckedUpdateWithoutCallsInput>
    create: XOR<tasksCreateWithoutCallsInput, tasksUncheckedCreateWithoutCallsInput>
    where?: tasksWhereInput
  }

  export type tasksUpdateToOneWithWhereWithoutCallsInput = {
    where?: tasksWhereInput
    data: XOR<tasksUpdateWithoutCallsInput, tasksUncheckedUpdateWithoutCallsInput>
  }

  export type tasksUpdateWithoutCallsInput = {
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule?: scheduleUpdateOneRequiredWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutCallsInput = {
    Id?: IntFieldUpdateOperationsInput | number
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    schedule_id?: IntFieldUpdateOperationsInput | number
  }

  export type statusesUpsertWithoutCallsInput = {
    update: XOR<statusesUpdateWithoutCallsInput, statusesUncheckedUpdateWithoutCallsInput>
    create: XOR<statusesCreateWithoutCallsInput, statusesUncheckedCreateWithoutCallsInput>
    where?: statusesWhereInput
  }

  export type statusesUpdateToOneWithWhereWithoutCallsInput = {
    where?: statusesWhereInput
    data: XOR<statusesUpdateWithoutCallsInput, statusesUncheckedUpdateWithoutCallsInput>
  }

  export type statusesUpdateWithoutCallsInput = {
    name_statuse?: StringFieldUpdateOperationsInput | string
  }

  export type statusesUncheckedUpdateWithoutCallsInput = {
    statuse_id?: IntFieldUpdateOperationsInput | number
    name_statuse?: StringFieldUpdateOperationsInput | string
  }

  export type callsCreateWithoutStatusesInput = {
    Id_API: number
    phone: string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    tasks: tasksCreateNestedOneWithoutCallsInput
  }

  export type callsUncheckedCreateWithoutStatusesInput = {
    Id_API: number
    task_id: number
    phone: string
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsCreateOrConnectWithoutStatusesInput = {
    where: callsWhereUniqueInput
    create: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput>
  }

  export type callsCreateManyStatusesInputEnvelope = {
    data: callsCreateManyStatusesInput | callsCreateManyStatusesInput[]
    skipDuplicates?: boolean
  }

  export type callsUpsertWithWhereUniqueWithoutStatusesInput = {
    where: callsWhereUniqueInput
    update: XOR<callsUpdateWithoutStatusesInput, callsUncheckedUpdateWithoutStatusesInput>
    create: XOR<callsCreateWithoutStatusesInput, callsUncheckedCreateWithoutStatusesInput>
  }

  export type callsUpdateWithWhereUniqueWithoutStatusesInput = {
    where: callsWhereUniqueInput
    data: XOR<callsUpdateWithoutStatusesInput, callsUncheckedUpdateWithoutStatusesInput>
  }

  export type callsUpdateManyWithWhereWithoutStatusesInput = {
    where: callsScalarWhereInput
    data: XOR<callsUpdateManyMutationInput, callsUncheckedUpdateManyWithoutStatusesInput>
  }

  export type scheduleCreateWithoutDoctorsInput = {
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
    patients?: patientsCreateNestedOneWithoutScheduleInput
    tasks?: tasksCreateNestedManyWithoutScheduleInput
  }

  export type scheduleUncheckedCreateWithoutDoctorsInput = {
    id?: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    patient_id?: number | null
    type?: number | null
    tasks?: tasksUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type scheduleCreateOrConnectWithoutDoctorsInput = {
    where: scheduleWhereUniqueInput
    create: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput>
  }

  export type scheduleCreateManyDoctorsInputEnvelope = {
    data: scheduleCreateManyDoctorsInput | scheduleCreateManyDoctorsInput[]
    skipDuplicates?: boolean
  }

  export type scheduleUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: scheduleWhereUniqueInput
    update: XOR<scheduleUpdateWithoutDoctorsInput, scheduleUncheckedUpdateWithoutDoctorsInput>
    create: XOR<scheduleCreateWithoutDoctorsInput, scheduleUncheckedCreateWithoutDoctorsInput>
  }

  export type scheduleUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: scheduleWhereUniqueInput
    data: XOR<scheduleUpdateWithoutDoctorsInput, scheduleUncheckedUpdateWithoutDoctorsInput>
  }

  export type scheduleUpdateManyWithWhereWithoutDoctorsInput = {
    where: scheduleScalarWhereInput
    data: XOR<scheduleUpdateManyMutationInput, scheduleUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type scheduleScalarWhereInput = {
    AND?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
    OR?: scheduleScalarWhereInput[]
    NOT?: scheduleScalarWhereInput | scheduleScalarWhereInput[]
    id?: IntFilter<"schedule"> | number
    doctor_id?: IntFilter<"schedule"> | number
    date?: DateTimeFilter<"schedule"> | Date | string
    time_from?: DateTimeFilter<"schedule"> | Date | string
    time_to?: DateTimeFilter<"schedule"> | Date | string
    is_free?: BoolFilter<"schedule"> | boolean
    patient_id?: IntNullableFilter<"schedule"> | number | null
    type?: IntNullableFilter<"schedule"> | number | null
  }

  export type scheduleCreateWithoutPatientsInput = {
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
    doctors: doctorsCreateNestedOneWithoutScheduleInput
    tasks?: tasksCreateNestedManyWithoutScheduleInput
  }

  export type scheduleUncheckedCreateWithoutPatientsInput = {
    id?: number
    doctor_id: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
    tasks?: tasksUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type scheduleCreateOrConnectWithoutPatientsInput = {
    where: scheduleWhereUniqueInput
    create: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput>
  }

  export type scheduleCreateManyPatientsInputEnvelope = {
    data: scheduleCreateManyPatientsInput | scheduleCreateManyPatientsInput[]
    skipDuplicates?: boolean
  }

  export type scheduleUpsertWithWhereUniqueWithoutPatientsInput = {
    where: scheduleWhereUniqueInput
    update: XOR<scheduleUpdateWithoutPatientsInput, scheduleUncheckedUpdateWithoutPatientsInput>
    create: XOR<scheduleCreateWithoutPatientsInput, scheduleUncheckedCreateWithoutPatientsInput>
  }

  export type scheduleUpdateWithWhereUniqueWithoutPatientsInput = {
    where: scheduleWhereUniqueInput
    data: XOR<scheduleUpdateWithoutPatientsInput, scheduleUncheckedUpdateWithoutPatientsInput>
  }

  export type scheduleUpdateManyWithWhereWithoutPatientsInput = {
    where: scheduleScalarWhereInput
    data: XOR<scheduleUpdateManyMutationInput, scheduleUncheckedUpdateManyWithoutPatientsInput>
  }

  export type doctorsCreateWithoutScheduleInput = {
    name: string
    spec: string
    price: number
  }

  export type doctorsUncheckedCreateWithoutScheduleInput = {
    id?: number
    name: string
    spec: string
    price: number
  }

  export type doctorsCreateOrConnectWithoutScheduleInput = {
    where: doctorsWhereUniqueInput
    create: XOR<doctorsCreateWithoutScheduleInput, doctorsUncheckedCreateWithoutScheduleInput>
  }

  export type patientsCreateWithoutScheduleInput = {
    phone: string
    name: string
    email: string
    gender: string
  }

  export type patientsUncheckedCreateWithoutScheduleInput = {
    id?: number
    phone: string
    name: string
    email: string
    gender: string
  }

  export type patientsCreateOrConnectWithoutScheduleInput = {
    where: patientsWhereUniqueInput
    create: XOR<patientsCreateWithoutScheduleInput, patientsUncheckedCreateWithoutScheduleInput>
  }

  export type tasksCreateWithoutScheduleInput = {
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    calls?: callsCreateNestedManyWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutScheduleInput = {
    Id?: number
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
    calls?: callsUncheckedCreateNestedManyWithoutTasksInput
  }

  export type tasksCreateOrConnectWithoutScheduleInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput>
  }

  export type tasksCreateManyScheduleInputEnvelope = {
    data: tasksCreateManyScheduleInput | tasksCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type doctorsUpsertWithoutScheduleInput = {
    update: XOR<doctorsUpdateWithoutScheduleInput, doctorsUncheckedUpdateWithoutScheduleInput>
    create: XOR<doctorsCreateWithoutScheduleInput, doctorsUncheckedCreateWithoutScheduleInput>
    where?: doctorsWhereInput
  }

  export type doctorsUpdateToOneWithWhereWithoutScheduleInput = {
    where?: doctorsWhereInput
    data: XOR<doctorsUpdateWithoutScheduleInput, doctorsUncheckedUpdateWithoutScheduleInput>
  }

  export type doctorsUpdateWithoutScheduleInput = {
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type doctorsUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    spec?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
  }

  export type patientsUpsertWithoutScheduleInput = {
    update: XOR<patientsUpdateWithoutScheduleInput, patientsUncheckedUpdateWithoutScheduleInput>
    create: XOR<patientsCreateWithoutScheduleInput, patientsUncheckedCreateWithoutScheduleInput>
    where?: patientsWhereInput
  }

  export type patientsUpdateToOneWithWhereWithoutScheduleInput = {
    where?: patientsWhereInput
    data: XOR<patientsUpdateWithoutScheduleInput, patientsUncheckedUpdateWithoutScheduleInput>
  }

  export type patientsUpdateWithoutScheduleInput = {
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type patientsUncheckedUpdateWithoutScheduleInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
  }

  export type tasksUpsertWithWhereUniqueWithoutScheduleInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutScheduleInput, tasksUncheckedUpdateWithoutScheduleInput>
    create: XOR<tasksCreateWithoutScheduleInput, tasksUncheckedCreateWithoutScheduleInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutScheduleInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutScheduleInput, tasksUncheckedUpdateWithoutScheduleInput>
  }

  export type tasksUpdateManyWithWhereWithoutScheduleInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutScheduleInput>
  }

  export type tasksScalarWhereInput = {
    AND?: tasksScalarWhereInput | tasksScalarWhereInput[]
    OR?: tasksScalarWhereInput[]
    NOT?: tasksScalarWhereInput | tasksScalarWhereInput[]
    Id?: IntFilter<"tasks"> | number
    count_calls?: IntFilter<"tasks"> | number
    number_phone?: StringFilter<"tasks"> | string
    status?: IntFilter<"tasks"> | number
    info?: JsonNullableFilter<"tasks">
    schedule_id?: IntFilter<"tasks"> | number
  }

  export type callsCreateManyTasksInput = {
    Id_API: number
    phone: string
    status_id: number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUpdateWithoutTasksInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    statuses?: statusesUpdateOneRequiredWithoutCallsNestedInput
  }

  export type callsUncheckedUpdateWithoutTasksInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    status_id?: IntFieldUpdateOperationsInput | number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUncheckedUpdateManyWithoutTasksInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    status_id?: IntFieldUpdateOperationsInput | number
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsCreateManyStatusesInput = {
    Id_API: number
    task_id: number
    phone: string
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUpdateWithoutStatusesInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
    tasks?: tasksUpdateOneRequiredWithoutCallsNestedInput
  }

  export type callsUncheckedUpdateWithoutStatusesInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type callsUncheckedUpdateManyWithoutStatusesInput = {
    Id_API?: IntFieldUpdateOperationsInput | number
    task_id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    info_result?: NullableJsonNullValueInput | InputJsonValue
  }

  export type scheduleCreateManyDoctorsInput = {
    id?: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    patient_id?: number | null
    type?: number | null
  }

  export type scheduleUpdateWithoutDoctorsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
    patients?: patientsUpdateOneWithoutScheduleNestedInput
    tasks?: tasksUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateWithoutDoctorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    patient_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateManyWithoutDoctorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    patient_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type scheduleCreateManyPatientsInput = {
    id?: number
    doctor_id: number
    date: Date | string
    time_from: Date | string
    time_to: Date | string
    is_free: boolean
    type?: number | null
  }

  export type scheduleUpdateWithoutPatientsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
    doctors?: doctorsUpdateOneRequiredWithoutScheduleNestedInput
    tasks?: tasksUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctor_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type scheduleUncheckedUpdateManyWithoutPatientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    doctor_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time_from?: DateTimeFieldUpdateOperationsInput | Date | string
    time_to?: DateTimeFieldUpdateOperationsInput | Date | string
    is_free?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tasksCreateManyScheduleInput = {
    Id?: number
    count_calls: number
    number_phone: string
    status: number
    info?: NullableJsonNullValueInput | InputJsonValue
  }

  export type tasksUpdateWithoutScheduleInput = {
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    calls?: callsUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutScheduleInput = {
    Id?: IntFieldUpdateOperationsInput | number
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
    calls?: callsUncheckedUpdateManyWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateManyWithoutScheduleInput = {
    Id?: IntFieldUpdateOperationsInput | number
    count_calls?: IntFieldUpdateOperationsInput | number
    number_phone?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    info?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}