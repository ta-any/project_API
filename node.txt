Blackbox 160
перезаписать переменные ФИО в глобальную
v.response.client

Регистрирует пациента в АПИ
Написать проверку АПИ

Реплика MIA:103 Ожидание нового запроса 


use mysql.destroy() for error()
- При попытке записаться на несуществующий, прошедший или занятый слот должны возвращаться ошибки

const promise1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('foo');
  }, 300);
}); VS async/await

const getData = async () => {
    let data = "Hello World";
    return data;
}
          await(?)
getData().then(data => console.log(data));


class sql {
    ...
    async connection(){ (???)
             return mysql.createConnection({
                 host: this.host,
                 user: this.user,
                 database: this.database,
                 password: this.password,
             })
        }
    ...
}




























---------------------------------------------------------------------------------------------------------

// connection.query("SELECT * FROM doctors",
//     function(err, results, fields) {
//         console.log(err);
//         console.log(results); // собственно данные
//         console.log(fields); // мета-данные полей
//     });
// connection.end();


    // add_doctors(name, spec, price){
    //     let sql =  this.connection()
    //     const info = sql.execute("INSERT INTO doctors (name, spec, price ) VALUES (?,?,?)", [name, spec, price],
    //         function(err, data) {
    //            return data //(?)
    //     })
    //
    //     this.close_connection(sql)
    //     return info
    // }

    // app.post("/add_patient", express.json(), function (req, res) {
    //     if(!req.body) {
    //         console.log(err)
    //         res.status(500)
    //         res.json('Err body')
    //         return
    //     }
    //     // if(!req.body) return res.sendStatus(400);
    //     const name = req.body.name;
    //     const phone = req.body.phone;
    //     const email = req.body.email;
    //     const gender = req.body.gender;
    //     connection.query("INSERT INTO patients (name, phone, email, gender ) VALUES (?,?,?,?)",
    //         [name, phone, email, gender], function(err, data) {
    //         if(err) {
    //             console.log(err)
    //             res.status(500)
    //             res.json('Err bd')
    //         } else {
    //             res.json('OK')
    //         }
    //         // res.redirect("/");
    //     });
    // });

    // app.post("/add_doctor", express.json(), function (req, res) {
    //     if(!req.body) {
    //         console.log(err)
    //         res.status(500)
    //         res.json('Err body')
    //         return
    //     }
    //     // if(!req.body) return res.sendStatus(400);
    //     const name = req.body.name;
    //     const spec = req.body.spec;
    //     const price = req.body.price;
    //     connection.query("INSERT INTO doctors (name, spec, price ) VALUES (?,?,?)", [name, spec, price], function(err, data) {
    //         if(err) {
    //             console.log(err)
    //             res.status(500)
    //             res.json('Err bd')
    //         } else {
    //             res.json('OK')
    //         }
    //
    //     });
    // });

---------------------------------------------------------


create table doctors
(
    id    int auto_increment
        primary key,
    name  varchar(255) not null,
    spec  varchar(255) not null,
    price int          not null
);

create index doctors_id_price_index
    on doctors (id, price);

create table patients
(
    id     int auto_increment
        primary key,
    phone  varchar(255) not null,
    name   varchar(255) not null,
    email  varchar(255) not null,
    gender char(20)     not null
);

create table schedule
(
    id         int auto_increment
        primary key,
    doctor_id  int        not null,
    date       date       not null,
    time_from  time       not null,
    time_to    time       not null,
    is_free    tinyint(1) not null,
    patient_id int        null,
    type       int        null,
    constraint schedule_id_uindex
        unique (id),
    constraint `schedule__doctors.id_fk`
        foreign key (doctor_id) references doctors (id),
    constraint schedule__id_fk
        foreign key (patient_id) references patients (id)
);