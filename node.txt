регистрация
расписание

console.log("Block Запрос в horsResponse()")

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: url: `http://lib.robotmia.ru/hors/get-date.php?text=${date}`,
  headers: {
    'Content-Type': 'application/json'
  },
  data : data
};

function responseData(str){

   const isoFormatData = ''
}

Проверить запись формата в таблицу (прикрутить) записывать одинаковом формате(!)

 Какой статус пишим если произошла ошибка?
 Что делать с ошибкой как ее записать? Записывать для нее результат в таблицы?

http://lib.robotmia.ru/hors/get-date.php?text=12 часов


        ------------------------------------------------------

     // if (!req.body) {
     //     console.log(err)
     //     res.status(500)
     //     response.msg += " Error Body"
     //     response.status = false
     //     res.json(response)
     //     return
     // }

     ---------------------------------------------------


Blackbox 160
перезаписать переменные ФИО в глобальную
v.response.client

Регистрирует пациента в АПИ
Написать проверку АПИ

Реплика MIA:103 Ожидание нового запроса 


const promise1 = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve('foo');
  }, 300);
}); VS async/await

const getData = async () => {
    let data = "Hello World";
    return data;
}
          await(?)
getData().then(data => console.log(data));


class sql {
    ...
    async connection(){ (???)
             return mysql.createConnection({
                 host: this.host,
                 user: this.user,
                 database: this.database,
                 password: this.password,
             })
        }
    ...
}


-------------------------------------------------------------------------



---------------------------------------------------------------------------
create table doctors
(
    id    int auto_increment
        primary key,
    name  varchar(255) not null,
    spec  varchar(255) not null,
    price int          not null
);

create index doctors_id_price_index
    on doctors (id, price);

create table patients
(
    id     int auto_increment
        primary key,
    phone  varchar(255) not null,
    name   varchar(255) not null,
    email  varchar(255) not null,
    gender char(20)     not null
);

create table schedule
(
    id         int auto_increment
        primary key,
    doctor_id  int        not null,
    date       date       not null,
    time_from  time       not null,
    time_to    time       not null,
    is_free    tinyint(1) not null,
    patient_id int        null,
    type       int        null,
    constraint schedule_id_uindex
        unique (id),
    constraint `schedule__doctors.id_fk`
        foreign key (doctor_id) references doctors (id),
    constraint schedule__id_fk
        foreign key (patient_id) references patients (id)
);

create table statuses
(
    statuse_id   int auto_increment
        primary key,
    name_statuse varchar(191) not null
);

create table tasks
(
    Id           int auto_increment
        primary key,
    count_calls  int          not null,
    number_phone varchar(191) not null,
    status       int          not null,
    info         json         null,
    schedule_id  int          not null,
    constraint `schedule__tasks.id_fk`
        foreign key (schedule_id) references schedule (id),
    constraint `statuses__tasks.id_fk`
        foreign key (status) references statuses (statuse_id)
);

create table calls
(
    Id_API      varchar(191) not null,
    task_id     int          not null,
    phone       varchar(191) not null,
    status_id   int          not null,
    info_result json         null,
    constraint calls_Id_API_key
        unique (Id_API),
    constraint `calls__statuse_id.id_fk`
        foreign key (status_id) references statuses (statuse_id),
    constraint `calls__task.id_fk`
        foreign key (task_id) references tasks (Id)
);


-------------------------------------------------------------------------
